
TDA7468_Prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f40  08003f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f40  08003f40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f40  08003f40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003f54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003f54  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008db4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbe  00000000  00000000  00028de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000efda  00000000  00000000  0002b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b26e  00000000  00000000  0003a94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000573e3  00000000  00000000  00045bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009cf9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e4c  00000000  00000000  0009cff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e98 	.word	0x08003e98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003e98 	.word	0x08003e98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 feaf 	bl	8000f8c <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe0f 	bl	8000e58 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fa76 	bl	8000734 <__aeabi_dsub>
 8000248:	f000 fe06 	bl	8000e58 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4698      	mov	r8, r3
 800026a:	030c      	lsls	r4, r1, #12
 800026c:	004b      	lsls	r3, r1, #1
 800026e:	0006      	movs	r6, r0
 8000270:	4692      	mov	sl, r2
 8000272:	b087      	sub	sp, #28
 8000274:	0b24      	lsrs	r4, r4, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	0fcf      	lsrs	r7, r1, #31
 800027a:	2b00      	cmp	r3, #0
 800027c:	d06c      	beq.n	8000358 <__aeabi_dmul+0xfc>
 800027e:	4add      	ldr	r2, [pc, #884]	; (80005f4 <__aeabi_dmul+0x398>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x2a>
 8000284:	e086      	b.n	8000394 <__aeabi_dmul+0x138>
 8000286:	0f42      	lsrs	r2, r0, #29
 8000288:	00e4      	lsls	r4, r4, #3
 800028a:	4314      	orrs	r4, r2
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	4314      	orrs	r4, r2
 8000292:	4ad9      	ldr	r2, [pc, #868]	; (80005f8 <__aeabi_dmul+0x39c>)
 8000294:	00c5      	lsls	r5, r0, #3
 8000296:	4694      	mov	ip, r2
 8000298:	4463      	add	r3, ip
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2300      	movs	r3, #0
 800029e:	4699      	mov	r9, r3
 80002a0:	469b      	mov	fp, r3
 80002a2:	4643      	mov	r3, r8
 80002a4:	4642      	mov	r2, r8
 80002a6:	031e      	lsls	r6, r3, #12
 80002a8:	0fd2      	lsrs	r2, r2, #31
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	4650      	mov	r0, sl
 80002ae:	4690      	mov	r8, r2
 80002b0:	0b36      	lsrs	r6, r6, #12
 80002b2:	0d5b      	lsrs	r3, r3, #21
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dmul+0x5c>
 80002b6:	e078      	b.n	80003aa <__aeabi_dmul+0x14e>
 80002b8:	4ace      	ldr	r2, [pc, #824]	; (80005f4 <__aeabi_dmul+0x398>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d01d      	beq.n	80002fa <__aeabi_dmul+0x9e>
 80002be:	49ce      	ldr	r1, [pc, #824]	; (80005f8 <__aeabi_dmul+0x39c>)
 80002c0:	0f42      	lsrs	r2, r0, #29
 80002c2:	468c      	mov	ip, r1
 80002c4:	9900      	ldr	r1, [sp, #0]
 80002c6:	4463      	add	r3, ip
 80002c8:	00f6      	lsls	r6, r6, #3
 80002ca:	468c      	mov	ip, r1
 80002cc:	4316      	orrs	r6, r2
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	449c      	add	ip, r3
 80002d2:	0412      	lsls	r2, r2, #16
 80002d4:	4663      	mov	r3, ip
 80002d6:	4316      	orrs	r6, r2
 80002d8:	00c2      	lsls	r2, r0, #3
 80002da:	2000      	movs	r0, #0
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	9900      	ldr	r1, [sp, #0]
 80002e0:	4643      	mov	r3, r8
 80002e2:	3101      	adds	r1, #1
 80002e4:	468c      	mov	ip, r1
 80002e6:	4649      	mov	r1, r9
 80002e8:	407b      	eors	r3, r7
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	290f      	cmp	r1, #15
 80002ee:	d900      	bls.n	80002f2 <__aeabi_dmul+0x96>
 80002f0:	e07e      	b.n	80003f0 <__aeabi_dmul+0x194>
 80002f2:	4bc2      	ldr	r3, [pc, #776]	; (80005fc <__aeabi_dmul+0x3a0>)
 80002f4:	0089      	lsls	r1, r1, #2
 80002f6:	5859      	ldr	r1, [r3, r1]
 80002f8:	468f      	mov	pc, r1
 80002fa:	4652      	mov	r2, sl
 80002fc:	9b00      	ldr	r3, [sp, #0]
 80002fe:	4332      	orrs	r2, r6
 8000300:	d000      	beq.n	8000304 <__aeabi_dmul+0xa8>
 8000302:	e156      	b.n	80005b2 <__aeabi_dmul+0x356>
 8000304:	49bb      	ldr	r1, [pc, #748]	; (80005f4 <__aeabi_dmul+0x398>)
 8000306:	2600      	movs	r6, #0
 8000308:	468c      	mov	ip, r1
 800030a:	4463      	add	r3, ip
 800030c:	4649      	mov	r1, r9
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2302      	movs	r3, #2
 8000312:	4319      	orrs	r1, r3
 8000314:	4689      	mov	r9, r1
 8000316:	2002      	movs	r0, #2
 8000318:	e7e1      	b.n	80002de <__aeabi_dmul+0x82>
 800031a:	4643      	mov	r3, r8
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	0034      	movs	r4, r6
 8000320:	0015      	movs	r5, r2
 8000322:	4683      	mov	fp, r0
 8000324:	465b      	mov	r3, fp
 8000326:	2b02      	cmp	r3, #2
 8000328:	d05e      	beq.n	80003e8 <__aeabi_dmul+0x18c>
 800032a:	2b03      	cmp	r3, #3
 800032c:	d100      	bne.n	8000330 <__aeabi_dmul+0xd4>
 800032e:	e1f3      	b.n	8000718 <__aeabi_dmul+0x4bc>
 8000330:	2b01      	cmp	r3, #1
 8000332:	d000      	beq.n	8000336 <__aeabi_dmul+0xda>
 8000334:	e118      	b.n	8000568 <__aeabi_dmul+0x30c>
 8000336:	2200      	movs	r2, #0
 8000338:	2400      	movs	r4, #0
 800033a:	2500      	movs	r5, #0
 800033c:	9b01      	ldr	r3, [sp, #4]
 800033e:	0512      	lsls	r2, r2, #20
 8000340:	4322      	orrs	r2, r4
 8000342:	07db      	lsls	r3, r3, #31
 8000344:	431a      	orrs	r2, r3
 8000346:	0028      	movs	r0, r5
 8000348:	0011      	movs	r1, r2
 800034a:	b007      	add	sp, #28
 800034c:	bcf0      	pop	{r4, r5, r6, r7}
 800034e:	46bb      	mov	fp, r7
 8000350:	46b2      	mov	sl, r6
 8000352:	46a9      	mov	r9, r5
 8000354:	46a0      	mov	r8, r4
 8000356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000358:	0025      	movs	r5, r4
 800035a:	4305      	orrs	r5, r0
 800035c:	d100      	bne.n	8000360 <__aeabi_dmul+0x104>
 800035e:	e141      	b.n	80005e4 <__aeabi_dmul+0x388>
 8000360:	2c00      	cmp	r4, #0
 8000362:	d100      	bne.n	8000366 <__aeabi_dmul+0x10a>
 8000364:	e1ad      	b.n	80006c2 <__aeabi_dmul+0x466>
 8000366:	0020      	movs	r0, r4
 8000368:	f000 fe1a 	bl	8000fa0 <__clzsi2>
 800036c:	0001      	movs	r1, r0
 800036e:	0002      	movs	r2, r0
 8000370:	390b      	subs	r1, #11
 8000372:	231d      	movs	r3, #29
 8000374:	0010      	movs	r0, r2
 8000376:	1a5b      	subs	r3, r3, r1
 8000378:	0031      	movs	r1, r6
 800037a:	0035      	movs	r5, r6
 800037c:	3808      	subs	r0, #8
 800037e:	4084      	lsls	r4, r0
 8000380:	40d9      	lsrs	r1, r3
 8000382:	4085      	lsls	r5, r0
 8000384:	430c      	orrs	r4, r1
 8000386:	489e      	ldr	r0, [pc, #632]	; (8000600 <__aeabi_dmul+0x3a4>)
 8000388:	1a83      	subs	r3, r0, r2
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2300      	movs	r3, #0
 800038e:	4699      	mov	r9, r3
 8000390:	469b      	mov	fp, r3
 8000392:	e786      	b.n	80002a2 <__aeabi_dmul+0x46>
 8000394:	0005      	movs	r5, r0
 8000396:	4325      	orrs	r5, r4
 8000398:	d000      	beq.n	800039c <__aeabi_dmul+0x140>
 800039a:	e11c      	b.n	80005d6 <__aeabi_dmul+0x37a>
 800039c:	2208      	movs	r2, #8
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2302      	movs	r3, #2
 80003a2:	2400      	movs	r4, #0
 80003a4:	4691      	mov	r9, r2
 80003a6:	469b      	mov	fp, r3
 80003a8:	e77b      	b.n	80002a2 <__aeabi_dmul+0x46>
 80003aa:	4652      	mov	r2, sl
 80003ac:	4332      	orrs	r2, r6
 80003ae:	d100      	bne.n	80003b2 <__aeabi_dmul+0x156>
 80003b0:	e10a      	b.n	80005c8 <__aeabi_dmul+0x36c>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d100      	bne.n	80003b8 <__aeabi_dmul+0x15c>
 80003b6:	e176      	b.n	80006a6 <__aeabi_dmul+0x44a>
 80003b8:	0030      	movs	r0, r6
 80003ba:	f000 fdf1 	bl	8000fa0 <__clzsi2>
 80003be:	0002      	movs	r2, r0
 80003c0:	3a0b      	subs	r2, #11
 80003c2:	231d      	movs	r3, #29
 80003c4:	0001      	movs	r1, r0
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	4652      	mov	r2, sl
 80003ca:	3908      	subs	r1, #8
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	408e      	lsls	r6, r1
 80003d0:	4316      	orrs	r6, r2
 80003d2:	4652      	mov	r2, sl
 80003d4:	408a      	lsls	r2, r1
 80003d6:	9b00      	ldr	r3, [sp, #0]
 80003d8:	4989      	ldr	r1, [pc, #548]	; (8000600 <__aeabi_dmul+0x3a4>)
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	0003      	movs	r3, r0
 80003de:	468c      	mov	ip, r1
 80003e0:	4463      	add	r3, ip
 80003e2:	2000      	movs	r0, #0
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	e77a      	b.n	80002de <__aeabi_dmul+0x82>
 80003e8:	2400      	movs	r4, #0
 80003ea:	2500      	movs	r5, #0
 80003ec:	4a81      	ldr	r2, [pc, #516]	; (80005f4 <__aeabi_dmul+0x398>)
 80003ee:	e7a5      	b.n	800033c <__aeabi_dmul+0xe0>
 80003f0:	0c2f      	lsrs	r7, r5, #16
 80003f2:	042d      	lsls	r5, r5, #16
 80003f4:	0c2d      	lsrs	r5, r5, #16
 80003f6:	002b      	movs	r3, r5
 80003f8:	0c11      	lsrs	r1, r2, #16
 80003fa:	0412      	lsls	r2, r2, #16
 80003fc:	0c12      	lsrs	r2, r2, #16
 80003fe:	4353      	muls	r3, r2
 8000400:	4698      	mov	r8, r3
 8000402:	0013      	movs	r3, r2
 8000404:	0028      	movs	r0, r5
 8000406:	437b      	muls	r3, r7
 8000408:	4699      	mov	r9, r3
 800040a:	4348      	muls	r0, r1
 800040c:	4448      	add	r0, r9
 800040e:	4683      	mov	fp, r0
 8000410:	4640      	mov	r0, r8
 8000412:	000b      	movs	r3, r1
 8000414:	0c00      	lsrs	r0, r0, #16
 8000416:	4682      	mov	sl, r0
 8000418:	4658      	mov	r0, fp
 800041a:	437b      	muls	r3, r7
 800041c:	4450      	add	r0, sl
 800041e:	9302      	str	r3, [sp, #8]
 8000420:	4581      	cmp	r9, r0
 8000422:	d906      	bls.n	8000432 <__aeabi_dmul+0x1d6>
 8000424:	469a      	mov	sl, r3
 8000426:	2380      	movs	r3, #128	; 0x80
 8000428:	025b      	lsls	r3, r3, #9
 800042a:	4699      	mov	r9, r3
 800042c:	44ca      	add	sl, r9
 800042e:	4653      	mov	r3, sl
 8000430:	9302      	str	r3, [sp, #8]
 8000432:	0c03      	lsrs	r3, r0, #16
 8000434:	469b      	mov	fp, r3
 8000436:	4643      	mov	r3, r8
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	0400      	lsls	r0, r0, #16
 800043c:	0c1b      	lsrs	r3, r3, #16
 800043e:	4698      	mov	r8, r3
 8000440:	0003      	movs	r3, r0
 8000442:	4443      	add	r3, r8
 8000444:	9304      	str	r3, [sp, #16]
 8000446:	0c33      	lsrs	r3, r6, #16
 8000448:	4699      	mov	r9, r3
 800044a:	002b      	movs	r3, r5
 800044c:	0436      	lsls	r6, r6, #16
 800044e:	0c36      	lsrs	r6, r6, #16
 8000450:	4373      	muls	r3, r6
 8000452:	4698      	mov	r8, r3
 8000454:	0033      	movs	r3, r6
 8000456:	437b      	muls	r3, r7
 8000458:	469a      	mov	sl, r3
 800045a:	464b      	mov	r3, r9
 800045c:	435d      	muls	r5, r3
 800045e:	435f      	muls	r7, r3
 8000460:	4643      	mov	r3, r8
 8000462:	4455      	add	r5, sl
 8000464:	0c18      	lsrs	r0, r3, #16
 8000466:	1940      	adds	r0, r0, r5
 8000468:	4582      	cmp	sl, r0
 800046a:	d903      	bls.n	8000474 <__aeabi_dmul+0x218>
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	025b      	lsls	r3, r3, #9
 8000470:	469a      	mov	sl, r3
 8000472:	4457      	add	r7, sl
 8000474:	0c05      	lsrs	r5, r0, #16
 8000476:	19eb      	adds	r3, r5, r7
 8000478:	9305      	str	r3, [sp, #20]
 800047a:	4643      	mov	r3, r8
 800047c:	041d      	lsls	r5, r3, #16
 800047e:	0c2d      	lsrs	r5, r5, #16
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	0c25      	lsrs	r5, r4, #16
 8000486:	0424      	lsls	r4, r4, #16
 8000488:	0c24      	lsrs	r4, r4, #16
 800048a:	0027      	movs	r7, r4
 800048c:	4357      	muls	r7, r2
 800048e:	436a      	muls	r2, r5
 8000490:	4690      	mov	r8, r2
 8000492:	002a      	movs	r2, r5
 8000494:	0c3b      	lsrs	r3, r7, #16
 8000496:	469a      	mov	sl, r3
 8000498:	434a      	muls	r2, r1
 800049a:	4361      	muls	r1, r4
 800049c:	4441      	add	r1, r8
 800049e:	4451      	add	r1, sl
 80004a0:	4483      	add	fp, r0
 80004a2:	4588      	cmp	r8, r1
 80004a4:	d903      	bls.n	80004ae <__aeabi_dmul+0x252>
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	025b      	lsls	r3, r3, #9
 80004aa:	4698      	mov	r8, r3
 80004ac:	4442      	add	r2, r8
 80004ae:	043f      	lsls	r7, r7, #16
 80004b0:	0c0b      	lsrs	r3, r1, #16
 80004b2:	0c3f      	lsrs	r7, r7, #16
 80004b4:	0409      	lsls	r1, r1, #16
 80004b6:	19c9      	adds	r1, r1, r7
 80004b8:	0027      	movs	r7, r4
 80004ba:	4698      	mov	r8, r3
 80004bc:	464b      	mov	r3, r9
 80004be:	4377      	muls	r7, r6
 80004c0:	435c      	muls	r4, r3
 80004c2:	436e      	muls	r6, r5
 80004c4:	435d      	muls	r5, r3
 80004c6:	0c3b      	lsrs	r3, r7, #16
 80004c8:	4699      	mov	r9, r3
 80004ca:	19a4      	adds	r4, r4, r6
 80004cc:	444c      	add	r4, r9
 80004ce:	4442      	add	r2, r8
 80004d0:	9503      	str	r5, [sp, #12]
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d904      	bls.n	80004e0 <__aeabi_dmul+0x284>
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	025b      	lsls	r3, r3, #9
 80004da:	4698      	mov	r8, r3
 80004dc:	4445      	add	r5, r8
 80004de:	9503      	str	r5, [sp, #12]
 80004e0:	9b02      	ldr	r3, [sp, #8]
 80004e2:	043f      	lsls	r7, r7, #16
 80004e4:	445b      	add	r3, fp
 80004e6:	001e      	movs	r6, r3
 80004e8:	4283      	cmp	r3, r0
 80004ea:	4180      	sbcs	r0, r0
 80004ec:	0423      	lsls	r3, r4, #16
 80004ee:	4698      	mov	r8, r3
 80004f0:	9b05      	ldr	r3, [sp, #20]
 80004f2:	0c3f      	lsrs	r7, r7, #16
 80004f4:	4447      	add	r7, r8
 80004f6:	4698      	mov	r8, r3
 80004f8:	1876      	adds	r6, r6, r1
 80004fa:	428e      	cmp	r6, r1
 80004fc:	4189      	sbcs	r1, r1
 80004fe:	4447      	add	r7, r8
 8000500:	4240      	negs	r0, r0
 8000502:	183d      	adds	r5, r7, r0
 8000504:	46a8      	mov	r8, r5
 8000506:	4693      	mov	fp, r2
 8000508:	4249      	negs	r1, r1
 800050a:	468a      	mov	sl, r1
 800050c:	44c3      	add	fp, r8
 800050e:	429f      	cmp	r7, r3
 8000510:	41bf      	sbcs	r7, r7
 8000512:	4580      	cmp	r8, r0
 8000514:	4180      	sbcs	r0, r0
 8000516:	9b03      	ldr	r3, [sp, #12]
 8000518:	44da      	add	sl, fp
 800051a:	4698      	mov	r8, r3
 800051c:	4653      	mov	r3, sl
 800051e:	4240      	negs	r0, r0
 8000520:	427f      	negs	r7, r7
 8000522:	4307      	orrs	r7, r0
 8000524:	0c24      	lsrs	r4, r4, #16
 8000526:	4593      	cmp	fp, r2
 8000528:	4192      	sbcs	r2, r2
 800052a:	458a      	cmp	sl, r1
 800052c:	4189      	sbcs	r1, r1
 800052e:	193f      	adds	r7, r7, r4
 8000530:	0ddc      	lsrs	r4, r3, #23
 8000532:	9b04      	ldr	r3, [sp, #16]
 8000534:	0275      	lsls	r5, r6, #9
 8000536:	431d      	orrs	r5, r3
 8000538:	1e68      	subs	r0, r5, #1
 800053a:	4185      	sbcs	r5, r0
 800053c:	4653      	mov	r3, sl
 800053e:	4252      	negs	r2, r2
 8000540:	4249      	negs	r1, r1
 8000542:	430a      	orrs	r2, r1
 8000544:	18bf      	adds	r7, r7, r2
 8000546:	4447      	add	r7, r8
 8000548:	0df6      	lsrs	r6, r6, #23
 800054a:	027f      	lsls	r7, r7, #9
 800054c:	4335      	orrs	r5, r6
 800054e:	025a      	lsls	r2, r3, #9
 8000550:	433c      	orrs	r4, r7
 8000552:	4315      	orrs	r5, r2
 8000554:	01fb      	lsls	r3, r7, #7
 8000556:	d400      	bmi.n	800055a <__aeabi_dmul+0x2fe>
 8000558:	e0c1      	b.n	80006de <__aeabi_dmul+0x482>
 800055a:	2101      	movs	r1, #1
 800055c:	086a      	lsrs	r2, r5, #1
 800055e:	400d      	ands	r5, r1
 8000560:	4315      	orrs	r5, r2
 8000562:	07e2      	lsls	r2, r4, #31
 8000564:	4315      	orrs	r5, r2
 8000566:	0864      	lsrs	r4, r4, #1
 8000568:	4926      	ldr	r1, [pc, #152]	; (8000604 <__aeabi_dmul+0x3a8>)
 800056a:	4461      	add	r1, ip
 800056c:	2900      	cmp	r1, #0
 800056e:	dd56      	ble.n	800061e <__aeabi_dmul+0x3c2>
 8000570:	076b      	lsls	r3, r5, #29
 8000572:	d009      	beq.n	8000588 <__aeabi_dmul+0x32c>
 8000574:	220f      	movs	r2, #15
 8000576:	402a      	ands	r2, r5
 8000578:	2a04      	cmp	r2, #4
 800057a:	d005      	beq.n	8000588 <__aeabi_dmul+0x32c>
 800057c:	1d2a      	adds	r2, r5, #4
 800057e:	42aa      	cmp	r2, r5
 8000580:	41ad      	sbcs	r5, r5
 8000582:	426d      	negs	r5, r5
 8000584:	1964      	adds	r4, r4, r5
 8000586:	0015      	movs	r5, r2
 8000588:	01e3      	lsls	r3, r4, #7
 800058a:	d504      	bpl.n	8000596 <__aeabi_dmul+0x33a>
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <__aeabi_dmul+0x3ac>)
 8000590:	00c9      	lsls	r1, r1, #3
 8000592:	4014      	ands	r4, r2
 8000594:	4461      	add	r1, ip
 8000596:	4a1d      	ldr	r2, [pc, #116]	; (800060c <__aeabi_dmul+0x3b0>)
 8000598:	4291      	cmp	r1, r2
 800059a:	dd00      	ble.n	800059e <__aeabi_dmul+0x342>
 800059c:	e724      	b.n	80003e8 <__aeabi_dmul+0x18c>
 800059e:	0762      	lsls	r2, r4, #29
 80005a0:	08ed      	lsrs	r5, r5, #3
 80005a2:	0264      	lsls	r4, r4, #9
 80005a4:	0549      	lsls	r1, r1, #21
 80005a6:	4315      	orrs	r5, r2
 80005a8:	0b24      	lsrs	r4, r4, #12
 80005aa:	0d4a      	lsrs	r2, r1, #21
 80005ac:	e6c6      	b.n	800033c <__aeabi_dmul+0xe0>
 80005ae:	9701      	str	r7, [sp, #4]
 80005b0:	e6b8      	b.n	8000324 <__aeabi_dmul+0xc8>
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <__aeabi_dmul+0x398>)
 80005b4:	2003      	movs	r0, #3
 80005b6:	4694      	mov	ip, r2
 80005b8:	4463      	add	r3, ip
 80005ba:	464a      	mov	r2, r9
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2303      	movs	r3, #3
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4691      	mov	r9, r2
 80005c4:	4652      	mov	r2, sl
 80005c6:	e68a      	b.n	80002de <__aeabi_dmul+0x82>
 80005c8:	4649      	mov	r1, r9
 80005ca:	2301      	movs	r3, #1
 80005cc:	4319      	orrs	r1, r3
 80005ce:	4689      	mov	r9, r1
 80005d0:	2600      	movs	r6, #0
 80005d2:	2001      	movs	r0, #1
 80005d4:	e683      	b.n	80002de <__aeabi_dmul+0x82>
 80005d6:	220c      	movs	r2, #12
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2303      	movs	r3, #3
 80005dc:	0005      	movs	r5, r0
 80005de:	4691      	mov	r9, r2
 80005e0:	469b      	mov	fp, r3
 80005e2:	e65e      	b.n	80002a2 <__aeabi_dmul+0x46>
 80005e4:	2304      	movs	r3, #4
 80005e6:	4699      	mov	r9, r3
 80005e8:	2300      	movs	r3, #0
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	2400      	movs	r4, #0
 80005f0:	469b      	mov	fp, r3
 80005f2:	e656      	b.n	80002a2 <__aeabi_dmul+0x46>
 80005f4:	000007ff 	.word	0x000007ff
 80005f8:	fffffc01 	.word	0xfffffc01
 80005fc:	08003ed0 	.word	0x08003ed0
 8000600:	fffffc0d 	.word	0xfffffc0d
 8000604:	000003ff 	.word	0x000003ff
 8000608:	feffffff 	.word	0xfeffffff
 800060c:	000007fe 	.word	0x000007fe
 8000610:	2300      	movs	r3, #0
 8000612:	2480      	movs	r4, #128	; 0x80
 8000614:	2500      	movs	r5, #0
 8000616:	4a44      	ldr	r2, [pc, #272]	; (8000728 <__aeabi_dmul+0x4cc>)
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	0324      	lsls	r4, r4, #12
 800061c:	e68e      	b.n	800033c <__aeabi_dmul+0xe0>
 800061e:	2001      	movs	r0, #1
 8000620:	1a40      	subs	r0, r0, r1
 8000622:	2838      	cmp	r0, #56	; 0x38
 8000624:	dd00      	ble.n	8000628 <__aeabi_dmul+0x3cc>
 8000626:	e686      	b.n	8000336 <__aeabi_dmul+0xda>
 8000628:	281f      	cmp	r0, #31
 800062a:	dd5b      	ble.n	80006e4 <__aeabi_dmul+0x488>
 800062c:	221f      	movs	r2, #31
 800062e:	0023      	movs	r3, r4
 8000630:	4252      	negs	r2, r2
 8000632:	1a51      	subs	r1, r2, r1
 8000634:	40cb      	lsrs	r3, r1
 8000636:	0019      	movs	r1, r3
 8000638:	2820      	cmp	r0, #32
 800063a:	d003      	beq.n	8000644 <__aeabi_dmul+0x3e8>
 800063c:	4a3b      	ldr	r2, [pc, #236]	; (800072c <__aeabi_dmul+0x4d0>)
 800063e:	4462      	add	r2, ip
 8000640:	4094      	lsls	r4, r2
 8000642:	4325      	orrs	r5, r4
 8000644:	1e6a      	subs	r2, r5, #1
 8000646:	4195      	sbcs	r5, r2
 8000648:	002a      	movs	r2, r5
 800064a:	430a      	orrs	r2, r1
 800064c:	2107      	movs	r1, #7
 800064e:	000d      	movs	r5, r1
 8000650:	2400      	movs	r4, #0
 8000652:	4015      	ands	r5, r2
 8000654:	4211      	tst	r1, r2
 8000656:	d05b      	beq.n	8000710 <__aeabi_dmul+0x4b4>
 8000658:	210f      	movs	r1, #15
 800065a:	2400      	movs	r4, #0
 800065c:	4011      	ands	r1, r2
 800065e:	2904      	cmp	r1, #4
 8000660:	d053      	beq.n	800070a <__aeabi_dmul+0x4ae>
 8000662:	1d11      	adds	r1, r2, #4
 8000664:	4291      	cmp	r1, r2
 8000666:	4192      	sbcs	r2, r2
 8000668:	4252      	negs	r2, r2
 800066a:	18a4      	adds	r4, r4, r2
 800066c:	000a      	movs	r2, r1
 800066e:	0223      	lsls	r3, r4, #8
 8000670:	d54b      	bpl.n	800070a <__aeabi_dmul+0x4ae>
 8000672:	2201      	movs	r2, #1
 8000674:	2400      	movs	r4, #0
 8000676:	2500      	movs	r5, #0
 8000678:	e660      	b.n	800033c <__aeabi_dmul+0xe0>
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	031b      	lsls	r3, r3, #12
 800067e:	421c      	tst	r4, r3
 8000680:	d009      	beq.n	8000696 <__aeabi_dmul+0x43a>
 8000682:	421e      	tst	r6, r3
 8000684:	d107      	bne.n	8000696 <__aeabi_dmul+0x43a>
 8000686:	4333      	orrs	r3, r6
 8000688:	031c      	lsls	r4, r3, #12
 800068a:	4643      	mov	r3, r8
 800068c:	0015      	movs	r5, r2
 800068e:	0b24      	lsrs	r4, r4, #12
 8000690:	4a25      	ldr	r2, [pc, #148]	; (8000728 <__aeabi_dmul+0x4cc>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	e652      	b.n	800033c <__aeabi_dmul+0xe0>
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	0312      	lsls	r2, r2, #12
 800069a:	4314      	orrs	r4, r2
 800069c:	0324      	lsls	r4, r4, #12
 800069e:	4a22      	ldr	r2, [pc, #136]	; (8000728 <__aeabi_dmul+0x4cc>)
 80006a0:	0b24      	lsrs	r4, r4, #12
 80006a2:	9701      	str	r7, [sp, #4]
 80006a4:	e64a      	b.n	800033c <__aeabi_dmul+0xe0>
 80006a6:	f000 fc7b 	bl	8000fa0 <__clzsi2>
 80006aa:	0003      	movs	r3, r0
 80006ac:	001a      	movs	r2, r3
 80006ae:	3215      	adds	r2, #21
 80006b0:	3020      	adds	r0, #32
 80006b2:	2a1c      	cmp	r2, #28
 80006b4:	dc00      	bgt.n	80006b8 <__aeabi_dmul+0x45c>
 80006b6:	e684      	b.n	80003c2 <__aeabi_dmul+0x166>
 80006b8:	4656      	mov	r6, sl
 80006ba:	3b08      	subs	r3, #8
 80006bc:	2200      	movs	r2, #0
 80006be:	409e      	lsls	r6, r3
 80006c0:	e689      	b.n	80003d6 <__aeabi_dmul+0x17a>
 80006c2:	f000 fc6d 	bl	8000fa0 <__clzsi2>
 80006c6:	0001      	movs	r1, r0
 80006c8:	0002      	movs	r2, r0
 80006ca:	3115      	adds	r1, #21
 80006cc:	3220      	adds	r2, #32
 80006ce:	291c      	cmp	r1, #28
 80006d0:	dc00      	bgt.n	80006d4 <__aeabi_dmul+0x478>
 80006d2:	e64e      	b.n	8000372 <__aeabi_dmul+0x116>
 80006d4:	0034      	movs	r4, r6
 80006d6:	3808      	subs	r0, #8
 80006d8:	2500      	movs	r5, #0
 80006da:	4084      	lsls	r4, r0
 80006dc:	e653      	b.n	8000386 <__aeabi_dmul+0x12a>
 80006de:	9b00      	ldr	r3, [sp, #0]
 80006e0:	469c      	mov	ip, r3
 80006e2:	e741      	b.n	8000568 <__aeabi_dmul+0x30c>
 80006e4:	4912      	ldr	r1, [pc, #72]	; (8000730 <__aeabi_dmul+0x4d4>)
 80006e6:	0022      	movs	r2, r4
 80006e8:	4461      	add	r1, ip
 80006ea:	002e      	movs	r6, r5
 80006ec:	408d      	lsls	r5, r1
 80006ee:	408a      	lsls	r2, r1
 80006f0:	40c6      	lsrs	r6, r0
 80006f2:	1e69      	subs	r1, r5, #1
 80006f4:	418d      	sbcs	r5, r1
 80006f6:	4332      	orrs	r2, r6
 80006f8:	432a      	orrs	r2, r5
 80006fa:	40c4      	lsrs	r4, r0
 80006fc:	0753      	lsls	r3, r2, #29
 80006fe:	d0b6      	beq.n	800066e <__aeabi_dmul+0x412>
 8000700:	210f      	movs	r1, #15
 8000702:	4011      	ands	r1, r2
 8000704:	2904      	cmp	r1, #4
 8000706:	d1ac      	bne.n	8000662 <__aeabi_dmul+0x406>
 8000708:	e7b1      	b.n	800066e <__aeabi_dmul+0x412>
 800070a:	0765      	lsls	r5, r4, #29
 800070c:	0264      	lsls	r4, r4, #9
 800070e:	0b24      	lsrs	r4, r4, #12
 8000710:	08d2      	lsrs	r2, r2, #3
 8000712:	4315      	orrs	r5, r2
 8000714:	2200      	movs	r2, #0
 8000716:	e611      	b.n	800033c <__aeabi_dmul+0xe0>
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0312      	lsls	r2, r2, #12
 800071c:	4314      	orrs	r4, r2
 800071e:	0324      	lsls	r4, r4, #12
 8000720:	4a01      	ldr	r2, [pc, #4]	; (8000728 <__aeabi_dmul+0x4cc>)
 8000722:	0b24      	lsrs	r4, r4, #12
 8000724:	e60a      	b.n	800033c <__aeabi_dmul+0xe0>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	000007ff 	.word	0x000007ff
 800072c:	0000043e 	.word	0x0000043e
 8000730:	0000041e 	.word	0x0000041e

08000734 <__aeabi_dsub>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	4657      	mov	r7, sl
 8000738:	464e      	mov	r6, r9
 800073a:	4645      	mov	r5, r8
 800073c:	46de      	mov	lr, fp
 800073e:	0004      	movs	r4, r0
 8000740:	b5e0      	push	{r5, r6, r7, lr}
 8000742:	001f      	movs	r7, r3
 8000744:	0010      	movs	r0, r2
 8000746:	030b      	lsls	r3, r1, #12
 8000748:	0f62      	lsrs	r2, r4, #29
 800074a:	004e      	lsls	r6, r1, #1
 800074c:	0fcd      	lsrs	r5, r1, #31
 800074e:	0a5b      	lsrs	r3, r3, #9
 8000750:	0339      	lsls	r1, r7, #12
 8000752:	4313      	orrs	r3, r2
 8000754:	0a49      	lsrs	r1, r1, #9
 8000756:	00e2      	lsls	r2, r4, #3
 8000758:	0f44      	lsrs	r4, r0, #29
 800075a:	4321      	orrs	r1, r4
 800075c:	4cc2      	ldr	r4, [pc, #776]	; (8000a68 <__aeabi_dsub+0x334>)
 800075e:	4691      	mov	r9, r2
 8000760:	4692      	mov	sl, r2
 8000762:	00c0      	lsls	r0, r0, #3
 8000764:	007a      	lsls	r2, r7, #1
 8000766:	4680      	mov	r8, r0
 8000768:	0d76      	lsrs	r6, r6, #21
 800076a:	0d52      	lsrs	r2, r2, #21
 800076c:	0fff      	lsrs	r7, r7, #31
 800076e:	42a2      	cmp	r2, r4
 8000770:	d100      	bne.n	8000774 <__aeabi_dsub+0x40>
 8000772:	e0b4      	b.n	80008de <__aeabi_dsub+0x1aa>
 8000774:	2401      	movs	r4, #1
 8000776:	4067      	eors	r7, r4
 8000778:	46bb      	mov	fp, r7
 800077a:	42bd      	cmp	r5, r7
 800077c:	d100      	bne.n	8000780 <__aeabi_dsub+0x4c>
 800077e:	e088      	b.n	8000892 <__aeabi_dsub+0x15e>
 8000780:	1ab4      	subs	r4, r6, r2
 8000782:	46a4      	mov	ip, r4
 8000784:	2c00      	cmp	r4, #0
 8000786:	dc00      	bgt.n	800078a <__aeabi_dsub+0x56>
 8000788:	e0b2      	b.n	80008f0 <__aeabi_dsub+0x1bc>
 800078a:	2a00      	cmp	r2, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x5c>
 800078e:	e0c5      	b.n	800091c <__aeabi_dsub+0x1e8>
 8000790:	4ab5      	ldr	r2, [pc, #724]	; (8000a68 <__aeabi_dsub+0x334>)
 8000792:	4296      	cmp	r6, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dsub+0x64>
 8000796:	e28b      	b.n	8000cb0 <__aeabi_dsub+0x57c>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4311      	orrs	r1, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dsub+0x72>
 80007a4:	e1a1      	b.n	8000aea <__aeabi_dsub+0x3b6>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dsub+0x78>
 80007aa:	e216      	b.n	8000bda <__aeabi_dsub+0x4a6>
 80007ac:	2720      	movs	r7, #32
 80007ae:	000c      	movs	r4, r1
 80007b0:	1abf      	subs	r7, r7, r2
 80007b2:	40bc      	lsls	r4, r7
 80007b4:	0002      	movs	r2, r0
 80007b6:	46a0      	mov	r8, r4
 80007b8:	4664      	mov	r4, ip
 80007ba:	40b8      	lsls	r0, r7
 80007bc:	40e2      	lsrs	r2, r4
 80007be:	4644      	mov	r4, r8
 80007c0:	4314      	orrs	r4, r2
 80007c2:	0002      	movs	r2, r0
 80007c4:	1e50      	subs	r0, r2, #1
 80007c6:	4182      	sbcs	r2, r0
 80007c8:	4660      	mov	r0, ip
 80007ca:	40c1      	lsrs	r1, r0
 80007cc:	4322      	orrs	r2, r4
 80007ce:	1a5b      	subs	r3, r3, r1
 80007d0:	4649      	mov	r1, r9
 80007d2:	1a8c      	subs	r4, r1, r2
 80007d4:	45a1      	cmp	r9, r4
 80007d6:	4192      	sbcs	r2, r2
 80007d8:	4252      	negs	r2, r2
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	4698      	mov	r8, r3
 80007de:	4643      	mov	r3, r8
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	d400      	bmi.n	80007e6 <__aeabi_dsub+0xb2>
 80007e4:	e117      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 80007e6:	4643      	mov	r3, r8
 80007e8:	025b      	lsls	r3, r3, #9
 80007ea:	0a5b      	lsrs	r3, r3, #9
 80007ec:	4698      	mov	r8, r3
 80007ee:	4643      	mov	r3, r8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dsub+0xc2>
 80007f4:	e16c      	b.n	8000ad0 <__aeabi_dsub+0x39c>
 80007f6:	4640      	mov	r0, r8
 80007f8:	f000 fbd2 	bl	8000fa0 <__clzsi2>
 80007fc:	0002      	movs	r2, r0
 80007fe:	3a08      	subs	r2, #8
 8000800:	2120      	movs	r1, #32
 8000802:	0020      	movs	r0, r4
 8000804:	4643      	mov	r3, r8
 8000806:	1a89      	subs	r1, r1, r2
 8000808:	4093      	lsls	r3, r2
 800080a:	40c8      	lsrs	r0, r1
 800080c:	4094      	lsls	r4, r2
 800080e:	4303      	orrs	r3, r0
 8000810:	4296      	cmp	r6, r2
 8000812:	dd00      	ble.n	8000816 <__aeabi_dsub+0xe2>
 8000814:	e157      	b.n	8000ac6 <__aeabi_dsub+0x392>
 8000816:	1b96      	subs	r6, r2, r6
 8000818:	1c71      	adds	r1, r6, #1
 800081a:	291f      	cmp	r1, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dsub+0xec>
 800081e:	e1cb      	b.n	8000bb8 <__aeabi_dsub+0x484>
 8000820:	2220      	movs	r2, #32
 8000822:	0018      	movs	r0, r3
 8000824:	0026      	movs	r6, r4
 8000826:	1a52      	subs	r2, r2, r1
 8000828:	4094      	lsls	r4, r2
 800082a:	4090      	lsls	r0, r2
 800082c:	40ce      	lsrs	r6, r1
 800082e:	40cb      	lsrs	r3, r1
 8000830:	1e62      	subs	r2, r4, #1
 8000832:	4194      	sbcs	r4, r2
 8000834:	4330      	orrs	r0, r6
 8000836:	4698      	mov	r8, r3
 8000838:	2600      	movs	r6, #0
 800083a:	4304      	orrs	r4, r0
 800083c:	0763      	lsls	r3, r4, #29
 800083e:	d009      	beq.n	8000854 <__aeabi_dsub+0x120>
 8000840:	230f      	movs	r3, #15
 8000842:	4023      	ands	r3, r4
 8000844:	2b04      	cmp	r3, #4
 8000846:	d005      	beq.n	8000854 <__aeabi_dsub+0x120>
 8000848:	1d23      	adds	r3, r4, #4
 800084a:	42a3      	cmp	r3, r4
 800084c:	41a4      	sbcs	r4, r4
 800084e:	4264      	negs	r4, r4
 8000850:	44a0      	add	r8, r4
 8000852:	001c      	movs	r4, r3
 8000854:	4643      	mov	r3, r8
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dsub+0x128>
 800085a:	e0df      	b.n	8000a1c <__aeabi_dsub+0x2e8>
 800085c:	4b82      	ldr	r3, [pc, #520]	; (8000a68 <__aeabi_dsub+0x334>)
 800085e:	3601      	adds	r6, #1
 8000860:	429e      	cmp	r6, r3
 8000862:	d100      	bne.n	8000866 <__aeabi_dsub+0x132>
 8000864:	e0fb      	b.n	8000a5e <__aeabi_dsub+0x32a>
 8000866:	4642      	mov	r2, r8
 8000868:	4b80      	ldr	r3, [pc, #512]	; (8000a6c <__aeabi_dsub+0x338>)
 800086a:	08e4      	lsrs	r4, r4, #3
 800086c:	401a      	ands	r2, r3
 800086e:	0013      	movs	r3, r2
 8000870:	0571      	lsls	r1, r6, #21
 8000872:	0752      	lsls	r2, r2, #29
 8000874:	025b      	lsls	r3, r3, #9
 8000876:	4322      	orrs	r2, r4
 8000878:	0b1b      	lsrs	r3, r3, #12
 800087a:	0d49      	lsrs	r1, r1, #21
 800087c:	0509      	lsls	r1, r1, #20
 800087e:	07ed      	lsls	r5, r5, #31
 8000880:	4319      	orrs	r1, r3
 8000882:	4329      	orrs	r1, r5
 8000884:	0010      	movs	r0, r2
 8000886:	bcf0      	pop	{r4, r5, r6, r7}
 8000888:	46bb      	mov	fp, r7
 800088a:	46b2      	mov	sl, r6
 800088c:	46a9      	mov	r9, r5
 800088e:	46a0      	mov	r8, r4
 8000890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000892:	1ab4      	subs	r4, r6, r2
 8000894:	46a4      	mov	ip, r4
 8000896:	2c00      	cmp	r4, #0
 8000898:	dd58      	ble.n	800094c <__aeabi_dsub+0x218>
 800089a:	2a00      	cmp	r2, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_dsub+0x16c>
 800089e:	e09e      	b.n	80009de <__aeabi_dsub+0x2aa>
 80008a0:	4a71      	ldr	r2, [pc, #452]	; (8000a68 <__aeabi_dsub+0x334>)
 80008a2:	4296      	cmp	r6, r2
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dsub+0x174>
 80008a6:	e13b      	b.n	8000b20 <__aeabi_dsub+0x3ec>
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0412      	lsls	r2, r2, #16
 80008ac:	4311      	orrs	r1, r2
 80008ae:	4662      	mov	r2, ip
 80008b0:	2a38      	cmp	r2, #56	; 0x38
 80008b2:	dd00      	ble.n	80008b6 <__aeabi_dsub+0x182>
 80008b4:	e0c1      	b.n	8000a3a <__aeabi_dsub+0x306>
 80008b6:	2a1f      	cmp	r2, #31
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_dsub+0x188>
 80008ba:	e1bb      	b.n	8000c34 <__aeabi_dsub+0x500>
 80008bc:	000c      	movs	r4, r1
 80008be:	3a20      	subs	r2, #32
 80008c0:	40d4      	lsrs	r4, r2
 80008c2:	0022      	movs	r2, r4
 80008c4:	4664      	mov	r4, ip
 80008c6:	2c20      	cmp	r4, #32
 80008c8:	d004      	beq.n	80008d4 <__aeabi_dsub+0x1a0>
 80008ca:	2740      	movs	r7, #64	; 0x40
 80008cc:	1b3f      	subs	r7, r7, r4
 80008ce:	40b9      	lsls	r1, r7
 80008d0:	4308      	orrs	r0, r1
 80008d2:	4680      	mov	r8, r0
 80008d4:	4644      	mov	r4, r8
 80008d6:	1e61      	subs	r1, r4, #1
 80008d8:	418c      	sbcs	r4, r1
 80008da:	4314      	orrs	r4, r2
 80008dc:	e0b1      	b.n	8000a42 <__aeabi_dsub+0x30e>
 80008de:	000c      	movs	r4, r1
 80008e0:	4304      	orrs	r4, r0
 80008e2:	d02a      	beq.n	800093a <__aeabi_dsub+0x206>
 80008e4:	46bb      	mov	fp, r7
 80008e6:	42bd      	cmp	r5, r7
 80008e8:	d02d      	beq.n	8000946 <__aeabi_dsub+0x212>
 80008ea:	4c61      	ldr	r4, [pc, #388]	; (8000a70 <__aeabi_dsub+0x33c>)
 80008ec:	46a4      	mov	ip, r4
 80008ee:	44b4      	add	ip, r6
 80008f0:	4664      	mov	r4, ip
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d05c      	beq.n	80009b0 <__aeabi_dsub+0x27c>
 80008f6:	1b94      	subs	r4, r2, r6
 80008f8:	46a4      	mov	ip, r4
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d000      	beq.n	8000900 <__aeabi_dsub+0x1cc>
 80008fe:	e115      	b.n	8000b2c <__aeabi_dsub+0x3f8>
 8000900:	464d      	mov	r5, r9
 8000902:	431d      	orrs	r5, r3
 8000904:	d100      	bne.n	8000908 <__aeabi_dsub+0x1d4>
 8000906:	e1c3      	b.n	8000c90 <__aeabi_dsub+0x55c>
 8000908:	1e65      	subs	r5, r4, #1
 800090a:	2c01      	cmp	r4, #1
 800090c:	d100      	bne.n	8000910 <__aeabi_dsub+0x1dc>
 800090e:	e20c      	b.n	8000d2a <__aeabi_dsub+0x5f6>
 8000910:	4e55      	ldr	r6, [pc, #340]	; (8000a68 <__aeabi_dsub+0x334>)
 8000912:	42b4      	cmp	r4, r6
 8000914:	d100      	bne.n	8000918 <__aeabi_dsub+0x1e4>
 8000916:	e1f8      	b.n	8000d0a <__aeabi_dsub+0x5d6>
 8000918:	46ac      	mov	ip, r5
 800091a:	e10e      	b.n	8000b3a <__aeabi_dsub+0x406>
 800091c:	000a      	movs	r2, r1
 800091e:	4302      	orrs	r2, r0
 8000920:	d100      	bne.n	8000924 <__aeabi_dsub+0x1f0>
 8000922:	e136      	b.n	8000b92 <__aeabi_dsub+0x45e>
 8000924:	0022      	movs	r2, r4
 8000926:	3a01      	subs	r2, #1
 8000928:	2c01      	cmp	r4, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dsub+0x1fa>
 800092c:	e1c6      	b.n	8000cbc <__aeabi_dsub+0x588>
 800092e:	4c4e      	ldr	r4, [pc, #312]	; (8000a68 <__aeabi_dsub+0x334>)
 8000930:	45a4      	cmp	ip, r4
 8000932:	d100      	bne.n	8000936 <__aeabi_dsub+0x202>
 8000934:	e0f4      	b.n	8000b20 <__aeabi_dsub+0x3ec>
 8000936:	4694      	mov	ip, r2
 8000938:	e731      	b.n	800079e <__aeabi_dsub+0x6a>
 800093a:	2401      	movs	r4, #1
 800093c:	4067      	eors	r7, r4
 800093e:	46bb      	mov	fp, r7
 8000940:	42bd      	cmp	r5, r7
 8000942:	d000      	beq.n	8000946 <__aeabi_dsub+0x212>
 8000944:	e71c      	b.n	8000780 <__aeabi_dsub+0x4c>
 8000946:	4c4a      	ldr	r4, [pc, #296]	; (8000a70 <__aeabi_dsub+0x33c>)
 8000948:	46a4      	mov	ip, r4
 800094a:	44b4      	add	ip, r6
 800094c:	4664      	mov	r4, ip
 800094e:	2c00      	cmp	r4, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_dsub+0x220>
 8000952:	e0cf      	b.n	8000af4 <__aeabi_dsub+0x3c0>
 8000954:	1b94      	subs	r4, r2, r6
 8000956:	46a4      	mov	ip, r4
 8000958:	2e00      	cmp	r6, #0
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x22a>
 800095c:	e15c      	b.n	8000c18 <__aeabi_dsub+0x4e4>
 800095e:	4e42      	ldr	r6, [pc, #264]	; (8000a68 <__aeabi_dsub+0x334>)
 8000960:	42b2      	cmp	r2, r6
 8000962:	d100      	bne.n	8000966 <__aeabi_dsub+0x232>
 8000964:	e1ec      	b.n	8000d40 <__aeabi_dsub+0x60c>
 8000966:	2680      	movs	r6, #128	; 0x80
 8000968:	0436      	lsls	r6, r6, #16
 800096a:	4333      	orrs	r3, r6
 800096c:	4664      	mov	r4, ip
 800096e:	2c38      	cmp	r4, #56	; 0x38
 8000970:	dd00      	ble.n	8000974 <__aeabi_dsub+0x240>
 8000972:	e1b3      	b.n	8000cdc <__aeabi_dsub+0x5a8>
 8000974:	2c1f      	cmp	r4, #31
 8000976:	dd00      	ble.n	800097a <__aeabi_dsub+0x246>
 8000978:	e238      	b.n	8000dec <__aeabi_dsub+0x6b8>
 800097a:	2620      	movs	r6, #32
 800097c:	1b36      	subs	r6, r6, r4
 800097e:	001c      	movs	r4, r3
 8000980:	40b4      	lsls	r4, r6
 8000982:	464f      	mov	r7, r9
 8000984:	46a0      	mov	r8, r4
 8000986:	4664      	mov	r4, ip
 8000988:	40e7      	lsrs	r7, r4
 800098a:	4644      	mov	r4, r8
 800098c:	433c      	orrs	r4, r7
 800098e:	464f      	mov	r7, r9
 8000990:	40b7      	lsls	r7, r6
 8000992:	003e      	movs	r6, r7
 8000994:	1e77      	subs	r7, r6, #1
 8000996:	41be      	sbcs	r6, r7
 8000998:	4334      	orrs	r4, r6
 800099a:	4666      	mov	r6, ip
 800099c:	40f3      	lsrs	r3, r6
 800099e:	18c9      	adds	r1, r1, r3
 80009a0:	1824      	adds	r4, r4, r0
 80009a2:	4284      	cmp	r4, r0
 80009a4:	419b      	sbcs	r3, r3
 80009a6:	425b      	negs	r3, r3
 80009a8:	4698      	mov	r8, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	4488      	add	r8, r1
 80009ae:	e04e      	b.n	8000a4e <__aeabi_dsub+0x31a>
 80009b0:	4a30      	ldr	r2, [pc, #192]	; (8000a74 <__aeabi_dsub+0x340>)
 80009b2:	1c74      	adds	r4, r6, #1
 80009b4:	4214      	tst	r4, r2
 80009b6:	d000      	beq.n	80009ba <__aeabi_dsub+0x286>
 80009b8:	e0d6      	b.n	8000b68 <__aeabi_dsub+0x434>
 80009ba:	464a      	mov	r2, r9
 80009bc:	431a      	orrs	r2, r3
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dsub+0x290>
 80009c2:	e15b      	b.n	8000c7c <__aeabi_dsub+0x548>
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_dsub+0x296>
 80009c8:	e1a5      	b.n	8000d16 <__aeabi_dsub+0x5e2>
 80009ca:	000a      	movs	r2, r1
 80009cc:	4302      	orrs	r2, r0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dsub+0x29e>
 80009d0:	e1bb      	b.n	8000d4a <__aeabi_dsub+0x616>
 80009d2:	464a      	mov	r2, r9
 80009d4:	0759      	lsls	r1, r3, #29
 80009d6:	08d2      	lsrs	r2, r2, #3
 80009d8:	430a      	orrs	r2, r1
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	e027      	b.n	8000a2e <__aeabi_dsub+0x2fa>
 80009de:	000a      	movs	r2, r1
 80009e0:	4302      	orrs	r2, r0
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dsub+0x2b2>
 80009e4:	e174      	b.n	8000cd0 <__aeabi_dsub+0x59c>
 80009e6:	0022      	movs	r2, r4
 80009e8:	3a01      	subs	r2, #1
 80009ea:	2c01      	cmp	r4, #1
 80009ec:	d005      	beq.n	80009fa <__aeabi_dsub+0x2c6>
 80009ee:	4c1e      	ldr	r4, [pc, #120]	; (8000a68 <__aeabi_dsub+0x334>)
 80009f0:	45a4      	cmp	ip, r4
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dsub+0x2c2>
 80009f4:	e094      	b.n	8000b20 <__aeabi_dsub+0x3ec>
 80009f6:	4694      	mov	ip, r2
 80009f8:	e759      	b.n	80008ae <__aeabi_dsub+0x17a>
 80009fa:	4448      	add	r0, r9
 80009fc:	4548      	cmp	r0, r9
 80009fe:	4192      	sbcs	r2, r2
 8000a00:	185b      	adds	r3, r3, r1
 8000a02:	4698      	mov	r8, r3
 8000a04:	0004      	movs	r4, r0
 8000a06:	4252      	negs	r2, r2
 8000a08:	4490      	add	r8, r2
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	2602      	movs	r6, #2
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	d500      	bpl.n	8000a14 <__aeabi_dsub+0x2e0>
 8000a12:	e0c4      	b.n	8000b9e <__aeabi_dsub+0x46a>
 8000a14:	3e01      	subs	r6, #1
 8000a16:	0763      	lsls	r3, r4, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_dsub+0x2e8>
 8000a1a:	e711      	b.n	8000840 <__aeabi_dsub+0x10c>
 8000a1c:	4643      	mov	r3, r8
 8000a1e:	46b4      	mov	ip, r6
 8000a20:	0759      	lsls	r1, r3, #29
 8000a22:	08e2      	lsrs	r2, r4, #3
 8000a24:	430a      	orrs	r2, r1
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	490f      	ldr	r1, [pc, #60]	; (8000a68 <__aeabi_dsub+0x334>)
 8000a2a:	458c      	cmp	ip, r1
 8000a2c:	d040      	beq.n	8000ab0 <__aeabi_dsub+0x37c>
 8000a2e:	4661      	mov	r1, ip
 8000a30:	031b      	lsls	r3, r3, #12
 8000a32:	0549      	lsls	r1, r1, #21
 8000a34:	0b1b      	lsrs	r3, r3, #12
 8000a36:	0d49      	lsrs	r1, r1, #21
 8000a38:	e720      	b.n	800087c <__aeabi_dsub+0x148>
 8000a3a:	4301      	orrs	r1, r0
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	1e61      	subs	r1, r4, #1
 8000a40:	418c      	sbcs	r4, r1
 8000a42:	444c      	add	r4, r9
 8000a44:	454c      	cmp	r4, r9
 8000a46:	4192      	sbcs	r2, r2
 8000a48:	4252      	negs	r2, r2
 8000a4a:	4690      	mov	r8, r2
 8000a4c:	4498      	add	r8, r3
 8000a4e:	4643      	mov	r3, r8
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	d5e0      	bpl.n	8000a16 <__aeabi_dsub+0x2e2>
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__aeabi_dsub+0x334>)
 8000a56:	3601      	adds	r6, #1
 8000a58:	429e      	cmp	r6, r3
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_dsub+0x32a>
 8000a5c:	e09f      	b.n	8000b9e <__aeabi_dsub+0x46a>
 8000a5e:	0031      	movs	r1, r6
 8000a60:	2300      	movs	r3, #0
 8000a62:	2200      	movs	r2, #0
 8000a64:	e70a      	b.n	800087c <__aeabi_dsub+0x148>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	000007ff 	.word	0x000007ff
 8000a6c:	ff7fffff 	.word	0xff7fffff
 8000a70:	fffff801 	.word	0xfffff801
 8000a74:	000007fe 	.word	0x000007fe
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dsub+0x34a>
 8000a7c:	e160      	b.n	8000d40 <__aeabi_dsub+0x60c>
 8000a7e:	000a      	movs	r2, r1
 8000a80:	4302      	orrs	r2, r0
 8000a82:	d04d      	beq.n	8000b20 <__aeabi_dsub+0x3ec>
 8000a84:	464a      	mov	r2, r9
 8000a86:	075c      	lsls	r4, r3, #29
 8000a88:	08d2      	lsrs	r2, r2, #3
 8000a8a:	4322      	orrs	r2, r4
 8000a8c:	2480      	movs	r4, #128	; 0x80
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	0324      	lsls	r4, r4, #12
 8000a92:	4223      	tst	r3, r4
 8000a94:	d007      	beq.n	8000aa6 <__aeabi_dsub+0x372>
 8000a96:	08ce      	lsrs	r6, r1, #3
 8000a98:	4226      	tst	r6, r4
 8000a9a:	d104      	bne.n	8000aa6 <__aeabi_dsub+0x372>
 8000a9c:	465d      	mov	r5, fp
 8000a9e:	0033      	movs	r3, r6
 8000aa0:	08c2      	lsrs	r2, r0, #3
 8000aa2:	0749      	lsls	r1, r1, #29
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	0f51      	lsrs	r1, r2, #29
 8000aa8:	00d2      	lsls	r2, r2, #3
 8000aaa:	08d2      	lsrs	r2, r2, #3
 8000aac:	0749      	lsls	r1, r1, #29
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	4319      	orrs	r1, r3
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_dsub+0x384>
 8000ab6:	e1c8      	b.n	8000e4a <__aeabi_dsub+0x716>
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0309      	lsls	r1, r1, #12
 8000abc:	430b      	orrs	r3, r1
 8000abe:	031b      	lsls	r3, r3, #12
 8000ac0:	49d5      	ldr	r1, [pc, #852]	; (8000e18 <__aeabi_dsub+0x6e4>)
 8000ac2:	0b1b      	lsrs	r3, r3, #12
 8000ac4:	e6da      	b.n	800087c <__aeabi_dsub+0x148>
 8000ac6:	49d5      	ldr	r1, [pc, #852]	; (8000e1c <__aeabi_dsub+0x6e8>)
 8000ac8:	1ab6      	subs	r6, r6, r2
 8000aca:	400b      	ands	r3, r1
 8000acc:	4698      	mov	r8, r3
 8000ace:	e6b5      	b.n	800083c <__aeabi_dsub+0x108>
 8000ad0:	0020      	movs	r0, r4
 8000ad2:	f000 fa65 	bl	8000fa0 <__clzsi2>
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	3218      	adds	r2, #24
 8000ada:	2a1f      	cmp	r2, #31
 8000adc:	dc00      	bgt.n	8000ae0 <__aeabi_dsub+0x3ac>
 8000ade:	e68f      	b.n	8000800 <__aeabi_dsub+0xcc>
 8000ae0:	0023      	movs	r3, r4
 8000ae2:	3808      	subs	r0, #8
 8000ae4:	4083      	lsls	r3, r0
 8000ae6:	2400      	movs	r4, #0
 8000ae8:	e692      	b.n	8000810 <__aeabi_dsub+0xdc>
 8000aea:	4308      	orrs	r0, r1
 8000aec:	0002      	movs	r2, r0
 8000aee:	1e50      	subs	r0, r2, #1
 8000af0:	4182      	sbcs	r2, r0
 8000af2:	e66d      	b.n	80007d0 <__aeabi_dsub+0x9c>
 8000af4:	4cca      	ldr	r4, [pc, #808]	; (8000e20 <__aeabi_dsub+0x6ec>)
 8000af6:	1c72      	adds	r2, r6, #1
 8000af8:	4222      	tst	r2, r4
 8000afa:	d000      	beq.n	8000afe <__aeabi_dsub+0x3ca>
 8000afc:	e0ad      	b.n	8000c5a <__aeabi_dsub+0x526>
 8000afe:	464a      	mov	r2, r9
 8000b00:	431a      	orrs	r2, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d1b8      	bne.n	8000a78 <__aeabi_dsub+0x344>
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dsub+0x3d8>
 8000b0a:	e158      	b.n	8000dbe <__aeabi_dsub+0x68a>
 8000b0c:	000a      	movs	r2, r1
 8000b0e:	4302      	orrs	r2, r0
 8000b10:	d000      	beq.n	8000b14 <__aeabi_dsub+0x3e0>
 8000b12:	e159      	b.n	8000dc8 <__aeabi_dsub+0x694>
 8000b14:	464a      	mov	r2, r9
 8000b16:	0759      	lsls	r1, r3, #29
 8000b18:	08d2      	lsrs	r2, r2, #3
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	e786      	b.n	8000a2e <__aeabi_dsub+0x2fa>
 8000b20:	464a      	mov	r2, r9
 8000b22:	0759      	lsls	r1, r3, #29
 8000b24:	08d2      	lsrs	r2, r2, #3
 8000b26:	430a      	orrs	r2, r1
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	e7c1      	b.n	8000ab0 <__aeabi_dsub+0x37c>
 8000b2c:	4dba      	ldr	r5, [pc, #744]	; (8000e18 <__aeabi_dsub+0x6e4>)
 8000b2e:	42aa      	cmp	r2, r5
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dsub+0x400>
 8000b32:	e11e      	b.n	8000d72 <__aeabi_dsub+0x63e>
 8000b34:	2580      	movs	r5, #128	; 0x80
 8000b36:	042d      	lsls	r5, r5, #16
 8000b38:	432b      	orrs	r3, r5
 8000b3a:	4664      	mov	r4, ip
 8000b3c:	2c38      	cmp	r4, #56	; 0x38
 8000b3e:	dc5d      	bgt.n	8000bfc <__aeabi_dsub+0x4c8>
 8000b40:	2c1f      	cmp	r4, #31
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_dsub+0x412>
 8000b44:	e0d0      	b.n	8000ce8 <__aeabi_dsub+0x5b4>
 8000b46:	2520      	movs	r5, #32
 8000b48:	4667      	mov	r7, ip
 8000b4a:	1b2d      	subs	r5, r5, r4
 8000b4c:	464e      	mov	r6, r9
 8000b4e:	001c      	movs	r4, r3
 8000b50:	40fe      	lsrs	r6, r7
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	4334      	orrs	r4, r6
 8000b56:	464e      	mov	r6, r9
 8000b58:	40ae      	lsls	r6, r5
 8000b5a:	0035      	movs	r5, r6
 8000b5c:	40fb      	lsrs	r3, r7
 8000b5e:	1e6e      	subs	r6, r5, #1
 8000b60:	41b5      	sbcs	r5, r6
 8000b62:	1ac9      	subs	r1, r1, r3
 8000b64:	432c      	orrs	r4, r5
 8000b66:	e04e      	b.n	8000c06 <__aeabi_dsub+0x4d2>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a14      	subs	r4, r2, r0
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	4192      	sbcs	r2, r2
 8000b70:	4252      	negs	r2, r2
 8000b72:	4690      	mov	r8, r2
 8000b74:	1a5f      	subs	r7, r3, r1
 8000b76:	003a      	movs	r2, r7
 8000b78:	4647      	mov	r7, r8
 8000b7a:	1bd2      	subs	r2, r2, r7
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d500      	bpl.n	8000b84 <__aeabi_dsub+0x450>
 8000b82:	e08b      	b.n	8000c9c <__aeabi_dsub+0x568>
 8000b84:	4642      	mov	r2, r8
 8000b86:	4322      	orrs	r2, r4
 8000b88:	d000      	beq.n	8000b8c <__aeabi_dsub+0x458>
 8000b8a:	e630      	b.n	80007ee <__aeabi_dsub+0xba>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2500      	movs	r5, #0
 8000b90:	e74d      	b.n	8000a2e <__aeabi_dsub+0x2fa>
 8000b92:	464a      	mov	r2, r9
 8000b94:	0759      	lsls	r1, r3, #29
 8000b96:	08d2      	lsrs	r2, r2, #3
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	08db      	lsrs	r3, r3, #3
 8000b9c:	e744      	b.n	8000a28 <__aeabi_dsub+0x2f4>
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	4b9e      	ldr	r3, [pc, #632]	; (8000e1c <__aeabi_dsub+0x6e8>)
 8000ba2:	0861      	lsrs	r1, r4, #1
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4014      	ands	r4, r2
 8000bac:	430c      	orrs	r4, r1
 8000bae:	07da      	lsls	r2, r3, #31
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	4314      	orrs	r4, r2
 8000bb6:	e641      	b.n	800083c <__aeabi_dsub+0x108>
 8000bb8:	001a      	movs	r2, r3
 8000bba:	3e1f      	subs	r6, #31
 8000bbc:	40f2      	lsrs	r2, r6
 8000bbe:	0016      	movs	r6, r2
 8000bc0:	2920      	cmp	r1, #32
 8000bc2:	d003      	beq.n	8000bcc <__aeabi_dsub+0x498>
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	1a51      	subs	r1, r2, r1
 8000bc8:	408b      	lsls	r3, r1
 8000bca:	431c      	orrs	r4, r3
 8000bcc:	1e62      	subs	r2, r4, #1
 8000bce:	4194      	sbcs	r4, r2
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4334      	orrs	r4, r6
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	e71d      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	3a20      	subs	r2, #32
 8000bde:	40d4      	lsrs	r4, r2
 8000be0:	0022      	movs	r2, r4
 8000be2:	4664      	mov	r4, ip
 8000be4:	2c20      	cmp	r4, #32
 8000be6:	d004      	beq.n	8000bf2 <__aeabi_dsub+0x4be>
 8000be8:	2740      	movs	r7, #64	; 0x40
 8000bea:	1b3f      	subs	r7, r7, r4
 8000bec:	40b9      	lsls	r1, r7
 8000bee:	4308      	orrs	r0, r1
 8000bf0:	4680      	mov	r8, r0
 8000bf2:	4644      	mov	r4, r8
 8000bf4:	1e61      	subs	r1, r4, #1
 8000bf6:	418c      	sbcs	r4, r1
 8000bf8:	4322      	orrs	r2, r4
 8000bfa:	e5e9      	b.n	80007d0 <__aeabi_dsub+0x9c>
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	4323      	orrs	r3, r4
 8000c00:	001c      	movs	r4, r3
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	1b04      	subs	r4, r0, r4
 8000c08:	42a0      	cmp	r0, r4
 8000c0a:	419b      	sbcs	r3, r3
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	4698      	mov	r8, r3
 8000c12:	465d      	mov	r5, fp
 8000c14:	0016      	movs	r6, r2
 8000c16:	e5e2      	b.n	80007de <__aeabi_dsub+0xaa>
 8000c18:	464e      	mov	r6, r9
 8000c1a:	431e      	orrs	r6, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dsub+0x4ec>
 8000c1e:	e0ae      	b.n	8000d7e <__aeabi_dsub+0x64a>
 8000c20:	1e66      	subs	r6, r4, #1
 8000c22:	2c01      	cmp	r4, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dsub+0x4f4>
 8000c26:	e0fd      	b.n	8000e24 <__aeabi_dsub+0x6f0>
 8000c28:	4f7b      	ldr	r7, [pc, #492]	; (8000e18 <__aeabi_dsub+0x6e4>)
 8000c2a:	42bc      	cmp	r4, r7
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dsub+0x4fc>
 8000c2e:	e107      	b.n	8000e40 <__aeabi_dsub+0x70c>
 8000c30:	46b4      	mov	ip, r6
 8000c32:	e69b      	b.n	800096c <__aeabi_dsub+0x238>
 8000c34:	4664      	mov	r4, ip
 8000c36:	2220      	movs	r2, #32
 8000c38:	1b12      	subs	r2, r2, r4
 8000c3a:	000c      	movs	r4, r1
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	0007      	movs	r7, r0
 8000c40:	4090      	lsls	r0, r2
 8000c42:	46a0      	mov	r8, r4
 8000c44:	4664      	mov	r4, ip
 8000c46:	1e42      	subs	r2, r0, #1
 8000c48:	4190      	sbcs	r0, r2
 8000c4a:	4662      	mov	r2, ip
 8000c4c:	40e7      	lsrs	r7, r4
 8000c4e:	4644      	mov	r4, r8
 8000c50:	40d1      	lsrs	r1, r2
 8000c52:	433c      	orrs	r4, r7
 8000c54:	4304      	orrs	r4, r0
 8000c56:	185b      	adds	r3, r3, r1
 8000c58:	e6f3      	b.n	8000a42 <__aeabi_dsub+0x30e>
 8000c5a:	4c6f      	ldr	r4, [pc, #444]	; (8000e18 <__aeabi_dsub+0x6e4>)
 8000c5c:	42a2      	cmp	r2, r4
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dsub+0x52e>
 8000c60:	e0d5      	b.n	8000e0e <__aeabi_dsub+0x6da>
 8000c62:	4448      	add	r0, r9
 8000c64:	185b      	adds	r3, r3, r1
 8000c66:	4548      	cmp	r0, r9
 8000c68:	4189      	sbcs	r1, r1
 8000c6a:	4249      	negs	r1, r1
 8000c6c:	185b      	adds	r3, r3, r1
 8000c6e:	07dc      	lsls	r4, r3, #31
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	4698      	mov	r8, r3
 8000c76:	0016      	movs	r6, r2
 8000c78:	4304      	orrs	r4, r0
 8000c7a:	e6cc      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 8000c7c:	2a00      	cmp	r2, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_dsub+0x54e>
 8000c80:	e082      	b.n	8000d88 <__aeabi_dsub+0x654>
 8000c82:	000a      	movs	r2, r1
 8000c84:	4302      	orrs	r2, r0
 8000c86:	d140      	bne.n	8000d0a <__aeabi_dsub+0x5d6>
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	031b      	lsls	r3, r3, #12
 8000c8e:	e713      	b.n	8000ab8 <__aeabi_dsub+0x384>
 8000c90:	074b      	lsls	r3, r1, #29
 8000c92:	08c2      	lsrs	r2, r0, #3
 8000c94:	431a      	orrs	r2, r3
 8000c96:	465d      	mov	r5, fp
 8000c98:	08cb      	lsrs	r3, r1, #3
 8000c9a:	e6c5      	b.n	8000a28 <__aeabi_dsub+0x2f4>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	1a84      	subs	r4, r0, r2
 8000ca0:	42a0      	cmp	r0, r4
 8000ca2:	4192      	sbcs	r2, r2
 8000ca4:	1acb      	subs	r3, r1, r3
 8000ca6:	4252      	negs	r2, r2
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	4698      	mov	r8, r3
 8000cac:	465d      	mov	r5, fp
 8000cae:	e59e      	b.n	80007ee <__aeabi_dsub+0xba>
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0759      	lsls	r1, r3, #29
 8000cb4:	08d2      	lsrs	r2, r2, #3
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	e6f9      	b.n	8000ab0 <__aeabi_dsub+0x37c>
 8000cbc:	464a      	mov	r2, r9
 8000cbe:	1a14      	subs	r4, r2, r0
 8000cc0:	45a1      	cmp	r9, r4
 8000cc2:	4192      	sbcs	r2, r2
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	4252      	negs	r2, r2
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	4698      	mov	r8, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e586      	b.n	80007de <__aeabi_dsub+0xaa>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	0759      	lsls	r1, r3, #29
 8000cd4:	08d2      	lsrs	r2, r2, #3
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	e6a5      	b.n	8000a28 <__aeabi_dsub+0x2f4>
 8000cdc:	464c      	mov	r4, r9
 8000cde:	4323      	orrs	r3, r4
 8000ce0:	001c      	movs	r4, r3
 8000ce2:	1e63      	subs	r3, r4, #1
 8000ce4:	419c      	sbcs	r4, r3
 8000ce6:	e65b      	b.n	80009a0 <__aeabi_dsub+0x26c>
 8000ce8:	4665      	mov	r5, ip
 8000cea:	001e      	movs	r6, r3
 8000cec:	3d20      	subs	r5, #32
 8000cee:	40ee      	lsrs	r6, r5
 8000cf0:	2c20      	cmp	r4, #32
 8000cf2:	d005      	beq.n	8000d00 <__aeabi_dsub+0x5cc>
 8000cf4:	2540      	movs	r5, #64	; 0x40
 8000cf6:	1b2d      	subs	r5, r5, r4
 8000cf8:	40ab      	lsls	r3, r5
 8000cfa:	464c      	mov	r4, r9
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	46a2      	mov	sl, r4
 8000d00:	4654      	mov	r4, sl
 8000d02:	1e63      	subs	r3, r4, #1
 8000d04:	419c      	sbcs	r4, r3
 8000d06:	4334      	orrs	r4, r6
 8000d08:	e77d      	b.n	8000c06 <__aeabi_dsub+0x4d2>
 8000d0a:	074b      	lsls	r3, r1, #29
 8000d0c:	08c2      	lsrs	r2, r0, #3
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	465d      	mov	r5, fp
 8000d12:	08cb      	lsrs	r3, r1, #3
 8000d14:	e6cc      	b.n	8000ab0 <__aeabi_dsub+0x37c>
 8000d16:	000a      	movs	r2, r1
 8000d18:	4302      	orrs	r2, r0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_dsub+0x5ea>
 8000d1c:	e736      	b.n	8000b8c <__aeabi_dsub+0x458>
 8000d1e:	074b      	lsls	r3, r1, #29
 8000d20:	08c2      	lsrs	r2, r0, #3
 8000d22:	431a      	orrs	r2, r3
 8000d24:	465d      	mov	r5, fp
 8000d26:	08cb      	lsrs	r3, r1, #3
 8000d28:	e681      	b.n	8000a2e <__aeabi_dsub+0x2fa>
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	42a0      	cmp	r0, r4
 8000d30:	4192      	sbcs	r2, r2
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	4252      	negs	r2, r2
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	4698      	mov	r8, r3
 8000d3a:	465d      	mov	r5, fp
 8000d3c:	2601      	movs	r6, #1
 8000d3e:	e54e      	b.n	80007de <__aeabi_dsub+0xaa>
 8000d40:	074b      	lsls	r3, r1, #29
 8000d42:	08c2      	lsrs	r2, r0, #3
 8000d44:	431a      	orrs	r2, r3
 8000d46:	08cb      	lsrs	r3, r1, #3
 8000d48:	e6b2      	b.n	8000ab0 <__aeabi_dsub+0x37c>
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	1a14      	subs	r4, r2, r0
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	4192      	sbcs	r2, r2
 8000d52:	1a5f      	subs	r7, r3, r1
 8000d54:	4252      	negs	r2, r2
 8000d56:	1aba      	subs	r2, r7, r2
 8000d58:	4690      	mov	r8, r2
 8000d5a:	0212      	lsls	r2, r2, #8
 8000d5c:	d56b      	bpl.n	8000e36 <__aeabi_dsub+0x702>
 8000d5e:	464a      	mov	r2, r9
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	42a0      	cmp	r0, r4
 8000d64:	4192      	sbcs	r2, r2
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	4252      	negs	r2, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	465d      	mov	r5, fp
 8000d70:	e564      	b.n	800083c <__aeabi_dsub+0x108>
 8000d72:	074b      	lsls	r3, r1, #29
 8000d74:	08c2      	lsrs	r2, r0, #3
 8000d76:	431a      	orrs	r2, r3
 8000d78:	465d      	mov	r5, fp
 8000d7a:	08cb      	lsrs	r3, r1, #3
 8000d7c:	e698      	b.n	8000ab0 <__aeabi_dsub+0x37c>
 8000d7e:	074b      	lsls	r3, r1, #29
 8000d80:	08c2      	lsrs	r2, r0, #3
 8000d82:	431a      	orrs	r2, r3
 8000d84:	08cb      	lsrs	r3, r1, #3
 8000d86:	e64f      	b.n	8000a28 <__aeabi_dsub+0x2f4>
 8000d88:	000a      	movs	r2, r1
 8000d8a:	4302      	orrs	r2, r0
 8000d8c:	d090      	beq.n	8000cb0 <__aeabi_dsub+0x57c>
 8000d8e:	464a      	mov	r2, r9
 8000d90:	075c      	lsls	r4, r3, #29
 8000d92:	08d2      	lsrs	r2, r2, #3
 8000d94:	4314      	orrs	r4, r2
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	0312      	lsls	r2, r2, #12
 8000d9c:	4213      	tst	r3, r2
 8000d9e:	d008      	beq.n	8000db2 <__aeabi_dsub+0x67e>
 8000da0:	08ce      	lsrs	r6, r1, #3
 8000da2:	4216      	tst	r6, r2
 8000da4:	d105      	bne.n	8000db2 <__aeabi_dsub+0x67e>
 8000da6:	08c0      	lsrs	r0, r0, #3
 8000da8:	0749      	lsls	r1, r1, #29
 8000daa:	4308      	orrs	r0, r1
 8000dac:	0004      	movs	r4, r0
 8000dae:	465d      	mov	r5, fp
 8000db0:	0033      	movs	r3, r6
 8000db2:	0f61      	lsrs	r1, r4, #29
 8000db4:	00e2      	lsls	r2, r4, #3
 8000db6:	0749      	lsls	r1, r1, #29
 8000db8:	08d2      	lsrs	r2, r2, #3
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	e678      	b.n	8000ab0 <__aeabi_dsub+0x37c>
 8000dbe:	074b      	lsls	r3, r1, #29
 8000dc0:	08c2      	lsrs	r2, r0, #3
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	08cb      	lsrs	r3, r1, #3
 8000dc6:	e632      	b.n	8000a2e <__aeabi_dsub+0x2fa>
 8000dc8:	4448      	add	r0, r9
 8000dca:	185b      	adds	r3, r3, r1
 8000dcc:	4548      	cmp	r0, r9
 8000dce:	4192      	sbcs	r2, r2
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	4252      	negs	r2, r2
 8000dd4:	4490      	add	r8, r2
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	0004      	movs	r4, r0
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	d400      	bmi.n	8000de0 <__aeabi_dsub+0x6ac>
 8000dde:	e61a      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 8000de0:	4642      	mov	r2, r8
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <__aeabi_dsub+0x6e8>)
 8000de4:	2601      	movs	r6, #1
 8000de6:	401a      	ands	r2, r3
 8000de8:	4690      	mov	r8, r2
 8000dea:	e614      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 8000dec:	4666      	mov	r6, ip
 8000dee:	001f      	movs	r7, r3
 8000df0:	3e20      	subs	r6, #32
 8000df2:	40f7      	lsrs	r7, r6
 8000df4:	2c20      	cmp	r4, #32
 8000df6:	d005      	beq.n	8000e04 <__aeabi_dsub+0x6d0>
 8000df8:	2640      	movs	r6, #64	; 0x40
 8000dfa:	1b36      	subs	r6, r6, r4
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	464c      	mov	r4, r9
 8000e00:	431c      	orrs	r4, r3
 8000e02:	46a2      	mov	sl, r4
 8000e04:	4654      	mov	r4, sl
 8000e06:	1e63      	subs	r3, r4, #1
 8000e08:	419c      	sbcs	r4, r3
 8000e0a:	433c      	orrs	r4, r7
 8000e0c:	e5c8      	b.n	80009a0 <__aeabi_dsub+0x26c>
 8000e0e:	0011      	movs	r1, r2
 8000e10:	2300      	movs	r3, #0
 8000e12:	2200      	movs	r2, #0
 8000e14:	e532      	b.n	800087c <__aeabi_dsub+0x148>
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	ff7fffff 	.word	0xff7fffff
 8000e20:	000007fe 	.word	0x000007fe
 8000e24:	464a      	mov	r2, r9
 8000e26:	1814      	adds	r4, r2, r0
 8000e28:	4284      	cmp	r4, r0
 8000e2a:	4192      	sbcs	r2, r2
 8000e2c:	185b      	adds	r3, r3, r1
 8000e2e:	4698      	mov	r8, r3
 8000e30:	4252      	negs	r2, r2
 8000e32:	4490      	add	r8, r2
 8000e34:	e5e9      	b.n	8000a0a <__aeabi_dsub+0x2d6>
 8000e36:	4642      	mov	r2, r8
 8000e38:	4322      	orrs	r2, r4
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dsub+0x70a>
 8000e3c:	e6a6      	b.n	8000b8c <__aeabi_dsub+0x458>
 8000e3e:	e5ea      	b.n	8000a16 <__aeabi_dsub+0x2e2>
 8000e40:	074b      	lsls	r3, r1, #29
 8000e42:	08c2      	lsrs	r2, r0, #3
 8000e44:	431a      	orrs	r2, r3
 8000e46:	08cb      	lsrs	r3, r1, #3
 8000e48:	e632      	b.n	8000ab0 <__aeabi_dsub+0x37c>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4901      	ldr	r1, [pc, #4]	; (8000e54 <__aeabi_dsub+0x720>)
 8000e4e:	0013      	movs	r3, r2
 8000e50:	e514      	b.n	800087c <__aeabi_dsub+0x148>
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	000007ff 	.word	0x000007ff

08000e58 <__aeabi_d2iz>:
 8000e58:	000a      	movs	r2, r1
 8000e5a:	b530      	push	{r4, r5, lr}
 8000e5c:	4c13      	ldr	r4, [pc, #76]	; (8000eac <__aeabi_d2iz+0x54>)
 8000e5e:	0053      	lsls	r3, r2, #1
 8000e60:	0309      	lsls	r1, r1, #12
 8000e62:	0005      	movs	r5, r0
 8000e64:	0b09      	lsrs	r1, r1, #12
 8000e66:	2000      	movs	r0, #0
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	0fd2      	lsrs	r2, r2, #31
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	dd04      	ble.n	8000e7a <__aeabi_d2iz+0x22>
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <__aeabi_d2iz+0x58>)
 8000e72:	4283      	cmp	r3, r0
 8000e74:	dd02      	ble.n	8000e7c <__aeabi_d2iz+0x24>
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <__aeabi_d2iz+0x5c>)
 8000e78:	18d0      	adds	r0, r2, r3
 8000e7a:	bd30      	pop	{r4, r5, pc}
 8000e7c:	2080      	movs	r0, #128	; 0x80
 8000e7e:	0340      	lsls	r0, r0, #13
 8000e80:	4301      	orrs	r1, r0
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <__aeabi_d2iz+0x60>)
 8000e84:	1ac0      	subs	r0, r0, r3
 8000e86:	281f      	cmp	r0, #31
 8000e88:	dd08      	ble.n	8000e9c <__aeabi_d2iz+0x44>
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <__aeabi_d2iz+0x64>)
 8000e8c:	1ac3      	subs	r3, r0, r3
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	000b      	movs	r3, r1
 8000e92:	4258      	negs	r0, r3
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	d1f0      	bne.n	8000e7a <__aeabi_d2iz+0x22>
 8000e98:	0018      	movs	r0, r3
 8000e9a:	e7ee      	b.n	8000e7a <__aeabi_d2iz+0x22>
 8000e9c:	4c08      	ldr	r4, [pc, #32]	; (8000ec0 <__aeabi_d2iz+0x68>)
 8000e9e:	40c5      	lsrs	r5, r0
 8000ea0:	46a4      	mov	ip, r4
 8000ea2:	4463      	add	r3, ip
 8000ea4:	4099      	lsls	r1, r3
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	432b      	orrs	r3, r5
 8000eaa:	e7f2      	b.n	8000e92 <__aeabi_d2iz+0x3a>
 8000eac:	000003fe 	.word	0x000003fe
 8000eb0:	0000041d 	.word	0x0000041d
 8000eb4:	7fffffff 	.word	0x7fffffff
 8000eb8:	00000433 	.word	0x00000433
 8000ebc:	00000413 	.word	0x00000413
 8000ec0:	fffffbed 	.word	0xfffffbed

08000ec4 <__aeabi_i2d>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d016      	beq.n	8000ef8 <__aeabi_i2d+0x34>
 8000eca:	17c3      	asrs	r3, r0, #31
 8000ecc:	18c5      	adds	r5, r0, r3
 8000ece:	405d      	eors	r5, r3
 8000ed0:	0fc4      	lsrs	r4, r0, #31
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	f000 f864 	bl	8000fa0 <__clzsi2>
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <__aeabi_i2d+0x5c>)
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	280a      	cmp	r0, #10
 8000ede:	dc16      	bgt.n	8000f0e <__aeabi_i2d+0x4a>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	002e      	movs	r6, r5
 8000ee4:	3315      	adds	r3, #21
 8000ee6:	409e      	lsls	r6, r3
 8000ee8:	230b      	movs	r3, #11
 8000eea:	1a18      	subs	r0, r3, r0
 8000eec:	40c5      	lsrs	r5, r0
 8000eee:	0553      	lsls	r3, r2, #21
 8000ef0:	032d      	lsls	r5, r5, #12
 8000ef2:	0b2d      	lsrs	r5, r5, #12
 8000ef4:	0d5b      	lsrs	r3, r3, #21
 8000ef6:	e003      	b.n	8000f00 <__aeabi_i2d+0x3c>
 8000ef8:	2400      	movs	r4, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	2500      	movs	r5, #0
 8000efe:	2600      	movs	r6, #0
 8000f00:	051b      	lsls	r3, r3, #20
 8000f02:	432b      	orrs	r3, r5
 8000f04:	07e4      	lsls	r4, r4, #31
 8000f06:	4323      	orrs	r3, r4
 8000f08:	0030      	movs	r0, r6
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	bd70      	pop	{r4, r5, r6, pc}
 8000f0e:	380b      	subs	r0, #11
 8000f10:	4085      	lsls	r5, r0
 8000f12:	0553      	lsls	r3, r2, #21
 8000f14:	032d      	lsls	r5, r5, #12
 8000f16:	2600      	movs	r6, #0
 8000f18:	0b2d      	lsrs	r5, r5, #12
 8000f1a:	0d5b      	lsrs	r3, r3, #21
 8000f1c:	e7f0      	b.n	8000f00 <__aeabi_i2d+0x3c>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	0000041e 	.word	0x0000041e

08000f24 <__aeabi_cdrcmple>:
 8000f24:	4684      	mov	ip, r0
 8000f26:	1c10      	adds	r0, r2, #0
 8000f28:	4662      	mov	r2, ip
 8000f2a:	468c      	mov	ip, r1
 8000f2c:	1c19      	adds	r1, r3, #0
 8000f2e:	4663      	mov	r3, ip
 8000f30:	e000      	b.n	8000f34 <__aeabi_cdcmpeq>
 8000f32:	46c0      	nop			; (mov r8, r8)

08000f34 <__aeabi_cdcmpeq>:
 8000f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f36:	f000 f8ff 	bl	8001138 <__ledf2>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d401      	bmi.n	8000f42 <__aeabi_cdcmpeq+0xe>
 8000f3e:	2100      	movs	r1, #0
 8000f40:	42c8      	cmn	r0, r1
 8000f42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f44 <__aeabi_dcmpeq>:
 8000f44:	b510      	push	{r4, lr}
 8000f46:	f000 f849 	bl	8000fdc <__eqdf2>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	3001      	adds	r0, #1
 8000f4e:	bd10      	pop	{r4, pc}

08000f50 <__aeabi_dcmplt>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	f000 f8f1 	bl	8001138 <__ledf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	db01      	blt.n	8000f5e <__aeabi_dcmplt+0xe>
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	2001      	movs	r0, #1
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)

08000f64 <__aeabi_dcmple>:
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f000 f8e7 	bl	8001138 <__ledf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	dd01      	ble.n	8000f72 <__aeabi_dcmple+0xe>
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	2001      	movs	r0, #1
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)

08000f78 <__aeabi_dcmpgt>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	f000 f86b 	bl	8001054 <__gedf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	dc01      	bgt.n	8000f86 <__aeabi_dcmpgt+0xe>
 8000f82:	2000      	movs	r0, #0
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	2001      	movs	r0, #1
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <__aeabi_dcmpge>:
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	f000 f861 	bl	8001054 <__gedf2>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	da01      	bge.n	8000f9a <__aeabi_dcmpge+0xe>
 8000f96:	2000      	movs	r0, #0
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)

08000fa0 <__clzsi2>:
 8000fa0:	211c      	movs	r1, #28
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d301      	bcc.n	8000fae <__clzsi2+0xe>
 8000faa:	0c00      	lsrs	r0, r0, #16
 8000fac:	3910      	subs	r1, #16
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	4298      	cmp	r0, r3
 8000fb2:	d301      	bcc.n	8000fb8 <__clzsi2+0x18>
 8000fb4:	0a00      	lsrs	r0, r0, #8
 8000fb6:	3908      	subs	r1, #8
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	4298      	cmp	r0, r3
 8000fbc:	d301      	bcc.n	8000fc2 <__clzsi2+0x22>
 8000fbe:	0900      	lsrs	r0, r0, #4
 8000fc0:	3904      	subs	r1, #4
 8000fc2:	a202      	add	r2, pc, #8	; (adr r2, 8000fcc <__clzsi2+0x2c>)
 8000fc4:	5c10      	ldrb	r0, [r2, r0]
 8000fc6:	1840      	adds	r0, r0, r1
 8000fc8:	4770      	bx	lr
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	02020304 	.word	0x02020304
 8000fd0:	01010101 	.word	0x01010101
	...

08000fdc <__eqdf2>:
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	464f      	mov	r7, r9
 8000fe0:	4646      	mov	r6, r8
 8000fe2:	46d6      	mov	lr, sl
 8000fe4:	4694      	mov	ip, r2
 8000fe6:	4691      	mov	r9, r2
 8000fe8:	031a      	lsls	r2, r3, #12
 8000fea:	0b12      	lsrs	r2, r2, #12
 8000fec:	4d18      	ldr	r5, [pc, #96]	; (8001050 <__eqdf2+0x74>)
 8000fee:	b5c0      	push	{r6, r7, lr}
 8000ff0:	004c      	lsls	r4, r1, #1
 8000ff2:	030f      	lsls	r7, r1, #12
 8000ff4:	4692      	mov	sl, r2
 8000ff6:	005a      	lsls	r2, r3, #1
 8000ff8:	0006      	movs	r6, r0
 8000ffa:	4680      	mov	r8, r0
 8000ffc:	0b3f      	lsrs	r7, r7, #12
 8000ffe:	2001      	movs	r0, #1
 8001000:	0d64      	lsrs	r4, r4, #21
 8001002:	0fc9      	lsrs	r1, r1, #31
 8001004:	0d52      	lsrs	r2, r2, #21
 8001006:	0fdb      	lsrs	r3, r3, #31
 8001008:	42ac      	cmp	r4, r5
 800100a:	d00a      	beq.n	8001022 <__eqdf2+0x46>
 800100c:	42aa      	cmp	r2, r5
 800100e:	d003      	beq.n	8001018 <__eqdf2+0x3c>
 8001010:	4294      	cmp	r4, r2
 8001012:	d101      	bne.n	8001018 <__eqdf2+0x3c>
 8001014:	4557      	cmp	r7, sl
 8001016:	d00d      	beq.n	8001034 <__eqdf2+0x58>
 8001018:	bce0      	pop	{r5, r6, r7}
 800101a:	46ba      	mov	sl, r7
 800101c:	46b1      	mov	r9, r6
 800101e:	46a8      	mov	r8, r5
 8001020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001022:	003d      	movs	r5, r7
 8001024:	4335      	orrs	r5, r6
 8001026:	d1f7      	bne.n	8001018 <__eqdf2+0x3c>
 8001028:	42a2      	cmp	r2, r4
 800102a:	d1f5      	bne.n	8001018 <__eqdf2+0x3c>
 800102c:	4652      	mov	r2, sl
 800102e:	4665      	mov	r5, ip
 8001030:	432a      	orrs	r2, r5
 8001032:	d1f1      	bne.n	8001018 <__eqdf2+0x3c>
 8001034:	2001      	movs	r0, #1
 8001036:	45c8      	cmp	r8, r9
 8001038:	d1ee      	bne.n	8001018 <__eqdf2+0x3c>
 800103a:	4299      	cmp	r1, r3
 800103c:	d006      	beq.n	800104c <__eqdf2+0x70>
 800103e:	2c00      	cmp	r4, #0
 8001040:	d1ea      	bne.n	8001018 <__eqdf2+0x3c>
 8001042:	433e      	orrs	r6, r7
 8001044:	0030      	movs	r0, r6
 8001046:	1e46      	subs	r6, r0, #1
 8001048:	41b0      	sbcs	r0, r6
 800104a:	e7e5      	b.n	8001018 <__eqdf2+0x3c>
 800104c:	2000      	movs	r0, #0
 800104e:	e7e3      	b.n	8001018 <__eqdf2+0x3c>
 8001050:	000007ff 	.word	0x000007ff

08001054 <__gedf2>:
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	464e      	mov	r6, r9
 8001058:	4645      	mov	r5, r8
 800105a:	4657      	mov	r7, sl
 800105c:	46de      	mov	lr, fp
 800105e:	0004      	movs	r4, r0
 8001060:	0018      	movs	r0, r3
 8001062:	b5e0      	push	{r5, r6, r7, lr}
 8001064:	0016      	movs	r6, r2
 8001066:	031b      	lsls	r3, r3, #12
 8001068:	0b1b      	lsrs	r3, r3, #12
 800106a:	4d32      	ldr	r5, [pc, #200]	; (8001134 <__gedf2+0xe0>)
 800106c:	030f      	lsls	r7, r1, #12
 800106e:	004a      	lsls	r2, r1, #1
 8001070:	4699      	mov	r9, r3
 8001072:	0043      	lsls	r3, r0, #1
 8001074:	46a4      	mov	ip, r4
 8001076:	46b0      	mov	r8, r6
 8001078:	0b3f      	lsrs	r7, r7, #12
 800107a:	0d52      	lsrs	r2, r2, #21
 800107c:	0fc9      	lsrs	r1, r1, #31
 800107e:	0d5b      	lsrs	r3, r3, #21
 8001080:	0fc0      	lsrs	r0, r0, #31
 8001082:	42aa      	cmp	r2, r5
 8001084:	d029      	beq.n	80010da <__gedf2+0x86>
 8001086:	42ab      	cmp	r3, r5
 8001088:	d018      	beq.n	80010bc <__gedf2+0x68>
 800108a:	2a00      	cmp	r2, #0
 800108c:	d12a      	bne.n	80010e4 <__gedf2+0x90>
 800108e:	433c      	orrs	r4, r7
 8001090:	46a3      	mov	fp, r4
 8001092:	4265      	negs	r5, r4
 8001094:	4165      	adcs	r5, r4
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <__gedf2+0x4c>
 800109a:	464c      	mov	r4, r9
 800109c:	4326      	orrs	r6, r4
 800109e:	d027      	beq.n	80010f0 <__gedf2+0x9c>
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d115      	bne.n	80010d0 <__gedf2+0x7c>
 80010a4:	4281      	cmp	r1, r0
 80010a6:	d028      	beq.n	80010fa <__gedf2+0xa6>
 80010a8:	2002      	movs	r0, #2
 80010aa:	3901      	subs	r1, #1
 80010ac:	4008      	ands	r0, r1
 80010ae:	3801      	subs	r0, #1
 80010b0:	bcf0      	pop	{r4, r5, r6, r7}
 80010b2:	46bb      	mov	fp, r7
 80010b4:	46b2      	mov	sl, r6
 80010b6:	46a9      	mov	r9, r5
 80010b8:	46a0      	mov	r8, r4
 80010ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010bc:	464d      	mov	r5, r9
 80010be:	432e      	orrs	r6, r5
 80010c0:	d12f      	bne.n	8001122 <__gedf2+0xce>
 80010c2:	2a00      	cmp	r2, #0
 80010c4:	d1ee      	bne.n	80010a4 <__gedf2+0x50>
 80010c6:	433c      	orrs	r4, r7
 80010c8:	4265      	negs	r5, r4
 80010ca:	4165      	adcs	r5, r4
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d0e9      	beq.n	80010a4 <__gedf2+0x50>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d1ed      	bne.n	80010b0 <__gedf2+0x5c>
 80010d4:	2001      	movs	r0, #1
 80010d6:	4240      	negs	r0, r0
 80010d8:	e7ea      	b.n	80010b0 <__gedf2+0x5c>
 80010da:	003d      	movs	r5, r7
 80010dc:	4325      	orrs	r5, r4
 80010de:	d120      	bne.n	8001122 <__gedf2+0xce>
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d0eb      	beq.n	80010bc <__gedf2+0x68>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1dd      	bne.n	80010a4 <__gedf2+0x50>
 80010e8:	464c      	mov	r4, r9
 80010ea:	4326      	orrs	r6, r4
 80010ec:	d1da      	bne.n	80010a4 <__gedf2+0x50>
 80010ee:	e7db      	b.n	80010a8 <__gedf2+0x54>
 80010f0:	465b      	mov	r3, fp
 80010f2:	2000      	movs	r0, #0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0db      	beq.n	80010b0 <__gedf2+0x5c>
 80010f8:	e7d6      	b.n	80010a8 <__gedf2+0x54>
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dc0a      	bgt.n	8001114 <__gedf2+0xc0>
 80010fe:	dbe7      	blt.n	80010d0 <__gedf2+0x7c>
 8001100:	454f      	cmp	r7, r9
 8001102:	d8d1      	bhi.n	80010a8 <__gedf2+0x54>
 8001104:	d010      	beq.n	8001128 <__gedf2+0xd4>
 8001106:	2000      	movs	r0, #0
 8001108:	454f      	cmp	r7, r9
 800110a:	d2d1      	bcs.n	80010b0 <__gedf2+0x5c>
 800110c:	2900      	cmp	r1, #0
 800110e:	d0e1      	beq.n	80010d4 <__gedf2+0x80>
 8001110:	0008      	movs	r0, r1
 8001112:	e7cd      	b.n	80010b0 <__gedf2+0x5c>
 8001114:	4243      	negs	r3, r0
 8001116:	4158      	adcs	r0, r3
 8001118:	2302      	movs	r3, #2
 800111a:	4240      	negs	r0, r0
 800111c:	4018      	ands	r0, r3
 800111e:	3801      	subs	r0, #1
 8001120:	e7c6      	b.n	80010b0 <__gedf2+0x5c>
 8001122:	2002      	movs	r0, #2
 8001124:	4240      	negs	r0, r0
 8001126:	e7c3      	b.n	80010b0 <__gedf2+0x5c>
 8001128:	45c4      	cmp	ip, r8
 800112a:	d8bd      	bhi.n	80010a8 <__gedf2+0x54>
 800112c:	2000      	movs	r0, #0
 800112e:	45c4      	cmp	ip, r8
 8001130:	d2be      	bcs.n	80010b0 <__gedf2+0x5c>
 8001132:	e7eb      	b.n	800110c <__gedf2+0xb8>
 8001134:	000007ff 	.word	0x000007ff

08001138 <__ledf2>:
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	464e      	mov	r6, r9
 800113c:	4645      	mov	r5, r8
 800113e:	4657      	mov	r7, sl
 8001140:	46de      	mov	lr, fp
 8001142:	0004      	movs	r4, r0
 8001144:	0018      	movs	r0, r3
 8001146:	b5e0      	push	{r5, r6, r7, lr}
 8001148:	0016      	movs	r6, r2
 800114a:	031b      	lsls	r3, r3, #12
 800114c:	0b1b      	lsrs	r3, r3, #12
 800114e:	4d31      	ldr	r5, [pc, #196]	; (8001214 <__ledf2+0xdc>)
 8001150:	030f      	lsls	r7, r1, #12
 8001152:	004a      	lsls	r2, r1, #1
 8001154:	4699      	mov	r9, r3
 8001156:	0043      	lsls	r3, r0, #1
 8001158:	46a4      	mov	ip, r4
 800115a:	46b0      	mov	r8, r6
 800115c:	0b3f      	lsrs	r7, r7, #12
 800115e:	0d52      	lsrs	r2, r2, #21
 8001160:	0fc9      	lsrs	r1, r1, #31
 8001162:	0d5b      	lsrs	r3, r3, #21
 8001164:	0fc0      	lsrs	r0, r0, #31
 8001166:	42aa      	cmp	r2, r5
 8001168:	d011      	beq.n	800118e <__ledf2+0x56>
 800116a:	42ab      	cmp	r3, r5
 800116c:	d014      	beq.n	8001198 <__ledf2+0x60>
 800116e:	2a00      	cmp	r2, #0
 8001170:	d12f      	bne.n	80011d2 <__ledf2+0x9a>
 8001172:	433c      	orrs	r4, r7
 8001174:	46a3      	mov	fp, r4
 8001176:	4265      	negs	r5, r4
 8001178:	4165      	adcs	r5, r4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d114      	bne.n	80011a8 <__ledf2+0x70>
 800117e:	464c      	mov	r4, r9
 8001180:	4326      	orrs	r6, r4
 8001182:	d111      	bne.n	80011a8 <__ledf2+0x70>
 8001184:	465b      	mov	r3, fp
 8001186:	2000      	movs	r0, #0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d017      	beq.n	80011bc <__ledf2+0x84>
 800118c:	e010      	b.n	80011b0 <__ledf2+0x78>
 800118e:	003d      	movs	r5, r7
 8001190:	4325      	orrs	r5, r4
 8001192:	d112      	bne.n	80011ba <__ledf2+0x82>
 8001194:	4293      	cmp	r3, r2
 8001196:	d11c      	bne.n	80011d2 <__ledf2+0x9a>
 8001198:	464d      	mov	r5, r9
 800119a:	432e      	orrs	r6, r5
 800119c:	d10d      	bne.n	80011ba <__ledf2+0x82>
 800119e:	2a00      	cmp	r2, #0
 80011a0:	d104      	bne.n	80011ac <__ledf2+0x74>
 80011a2:	433c      	orrs	r4, r7
 80011a4:	4265      	negs	r5, r4
 80011a6:	4165      	adcs	r5, r4
 80011a8:	2d00      	cmp	r5, #0
 80011aa:	d10d      	bne.n	80011c8 <__ledf2+0x90>
 80011ac:	4281      	cmp	r1, r0
 80011ae:	d016      	beq.n	80011de <__ledf2+0xa6>
 80011b0:	2002      	movs	r0, #2
 80011b2:	3901      	subs	r1, #1
 80011b4:	4008      	ands	r0, r1
 80011b6:	3801      	subs	r0, #1
 80011b8:	e000      	b.n	80011bc <__ledf2+0x84>
 80011ba:	2002      	movs	r0, #2
 80011bc:	bcf0      	pop	{r4, r5, r6, r7}
 80011be:	46bb      	mov	fp, r7
 80011c0:	46b2      	mov	sl, r6
 80011c2:	46a9      	mov	r9, r5
 80011c4:	46a0      	mov	r8, r4
 80011c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d1f7      	bne.n	80011bc <__ledf2+0x84>
 80011cc:	2001      	movs	r0, #1
 80011ce:	4240      	negs	r0, r0
 80011d0:	e7f4      	b.n	80011bc <__ledf2+0x84>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1ea      	bne.n	80011ac <__ledf2+0x74>
 80011d6:	464c      	mov	r4, r9
 80011d8:	4326      	orrs	r6, r4
 80011da:	d1e7      	bne.n	80011ac <__ledf2+0x74>
 80011dc:	e7e8      	b.n	80011b0 <__ledf2+0x78>
 80011de:	429a      	cmp	r2, r3
 80011e0:	dd06      	ble.n	80011f0 <__ledf2+0xb8>
 80011e2:	4243      	negs	r3, r0
 80011e4:	4158      	adcs	r0, r3
 80011e6:	2302      	movs	r3, #2
 80011e8:	4240      	negs	r0, r0
 80011ea:	4018      	ands	r0, r3
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7e5      	b.n	80011bc <__ledf2+0x84>
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbe9      	blt.n	80011c8 <__ledf2+0x90>
 80011f4:	454f      	cmp	r7, r9
 80011f6:	d8db      	bhi.n	80011b0 <__ledf2+0x78>
 80011f8:	d006      	beq.n	8001208 <__ledf2+0xd0>
 80011fa:	2000      	movs	r0, #0
 80011fc:	454f      	cmp	r7, r9
 80011fe:	d2dd      	bcs.n	80011bc <__ledf2+0x84>
 8001200:	2900      	cmp	r1, #0
 8001202:	d0e3      	beq.n	80011cc <__ledf2+0x94>
 8001204:	0008      	movs	r0, r1
 8001206:	e7d9      	b.n	80011bc <__ledf2+0x84>
 8001208:	45c4      	cmp	ip, r8
 800120a:	d8d1      	bhi.n	80011b0 <__ledf2+0x78>
 800120c:	2000      	movs	r0, #0
 800120e:	45c4      	cmp	ip, r8
 8001210:	d2d4      	bcs.n	80011bc <__ledf2+0x84>
 8001212:	e7f5      	b.n	8001200 <__ledf2+0xc8>
 8001214:	000007ff 	.word	0x000007ff

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b091      	sub	sp, #68	; 0x44
 800121c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 fb97 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f8b3 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f000 f9dd 	bl	80015e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800122a:	f000 f9bd 	bl	80015a8 <MX_DMA_Init>
  MX_ADC_Init();
 800122e:	f000 f905 	bl	800143c <MX_ADC_Init>
  MX_I2C1_Init();
 8001232:	f000 f979 	bl	8001528 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  TDA7468_Init(hi2c1);
 8001236:	4c4c      	ldr	r4, [pc, #304]	; (8001368 <main+0x150>)
 8001238:	466b      	mov	r3, sp
 800123a:	0018      	movs	r0, r3
 800123c:	0023      	movs	r3, r4
 800123e:	3310      	adds	r3, #16
 8001240:	223c      	movs	r2, #60	; 0x3c
 8001242:	0019      	movs	r1, r3
 8001244:	f002 fe16 	bl	8003e74 <memcpy>
 8001248:	6820      	ldr	r0, [r4, #0]
 800124a:	6861      	ldr	r1, [r4, #4]
 800124c:	68a2      	ldr	r2, [r4, #8]
 800124e:	68e3      	ldr	r3, [r4, #12]
 8001250:	f002 fc9a 	bl	8003b88 <TDA7468_Init>
  TDA7468_Set_Input(0);
 8001254:	2000      	movs	r0, #0
 8001256:	f002 fdb3 	bl	8003dc0 <TDA7468_Set_Input>
  HAL_ADC_Start_DMA(&hadc,pData,3);
 800125a:	4944      	ldr	r1, [pc, #272]	; (800136c <main+0x154>)
 800125c:	4b44      	ldr	r3, [pc, #272]	; (8001370 <main+0x158>)
 800125e:	2203      	movs	r2, #3
 8001260:	0018      	movs	r0, r3
 8001262:	f000 fd19 	bl	8001c98 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 8001266:	2390      	movs	r3, #144	; 0x90
 8001268:	05db      	lsls	r3, r3, #23
 800126a:	2201      	movs	r2, #1
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	0018      	movs	r0, r3
 8001270:	f001 fba5 	bl	80029be <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 	  if (HAL_GPIO_ReadPin(BLE_PWR_GPIO_Port, BLE_PWR_Pin))
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <main+0x15c>)
 8001276:	2102      	movs	r1, #2
 8001278:	0018      	movs	r0, r3
 800127a:	f001 fb83 	bl	8002984 <HAL_GPIO_ReadPin>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d019      	beq.n	80012b6 <main+0x9e>
		{
		  TDA7468_Set_Input(IN2);
 8001282:	2001      	movs	r0, #1
 8001284:	f002 fd9c 	bl	8003dc0 <TDA7468_Set_Input>
		  if (HAL_GPIO_ReadPin(BLE_LED_GPIO_Port, BLE_LED_Pin))
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <main+0x160>)
 800128a:	2101      	movs	r1, #1
 800128c:	0018      	movs	r0, r3
 800128e:	f001 fb79 	bl	8002984 <HAL_GPIO_ReadPin>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d007      	beq.n	80012a6 <main+0x8e>
		  {
			  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 8001296:	2390      	movs	r3, #144	; 0x90
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	2200      	movs	r2, #0
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	0018      	movs	r0, r3
 80012a0:	f001 fb8d 	bl	80029be <HAL_GPIO_WritePin>
 80012a4:	e011      	b.n	80012ca <main+0xb2>
		  }else
		  {
			  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 80012a6:	2390      	movs	r3, #144	; 0x90
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	2201      	movs	r2, #1
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 fb85 	bl	80029be <HAL_GPIO_WritePin>
 80012b4:	e009      	b.n	80012ca <main+0xb2>
		  }
		}
	  else {
		  TDA7468_Set_Input(IN1);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f002 fd82 	bl	8003dc0 <TDA7468_Set_Input>
		  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_SET);
 80012bc:	2390      	movs	r3, #144	; 0x90
 80012be:	05db      	lsls	r3, r3, #23
 80012c0:	2201      	movs	r2, #1
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0018      	movs	r0, r3
 80012c6:	f001 fb7a 	bl	80029be <HAL_GPIO_WritePin>
	  }
	  Cnt = pData[0]*0.015380859375;
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <main+0x154>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7ff fdf8 	bl	8000ec4 <__aeabi_i2d>
 80012d4:	2200      	movs	r2, #0
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <main+0x164>)
 80012d8:	f7fe ffc0 	bl	800025c <__aeabi_dmul>
 80012dc:	0002      	movs	r2, r0
 80012de:	000b      	movs	r3, r1
 80012e0:	0010      	movs	r0, r2
 80012e2:	0019      	movs	r1, r3
 80012e4:	f7fe ff9c 	bl	8000220 <__aeabi_d2uiz>
 80012e8:	0003      	movs	r3, r0
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <main+0x168>)
 80012ee:	701a      	strb	r2, [r3, #0]
	// Cnt= reverse(Cnt);
	  TDA7468_Master_Volume(Cnt);
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <main+0x168>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f002 fcf5 	bl	8003ce4 <TDA7468_Master_Volume>
	  Cnt = (4096-pData[2])*0.003662109375;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <main+0x154>)
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	001a      	movs	r2, r3
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	015b      	lsls	r3, r3, #5
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff fddc 	bl	8000ec4 <__aeabi_i2d>
 800130c:	2200      	movs	r2, #0
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <main+0x16c>)
 8001310:	f7fe ffa4 	bl	800025c <__aeabi_dmul>
 8001314:	0002      	movs	r2, r0
 8001316:	000b      	movs	r3, r1
 8001318:	0010      	movs	r0, r2
 800131a:	0019      	movs	r1, r3
 800131c:	f7fe ff80 	bl	8000220 <__aeabi_d2uiz>
 8001320:	0003      	movs	r3, r0
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <main+0x168>)
 8001326:	701a      	strb	r2, [r3, #0]
	  Cnt1 = (4096-pData[1])*0.003662109375;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <main+0x154>)
 800132a:	885b      	ldrh	r3, [r3, #2]
 800132c:	001a      	movs	r2, r3
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	015b      	lsls	r3, r3, #5
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff fdc5 	bl	8000ec4 <__aeabi_i2d>
 800133a:	2200      	movs	r2, #0
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <main+0x16c>)
 800133e:	f7fe ff8d 	bl	800025c <__aeabi_dmul>
 8001342:	0002      	movs	r2, r0
 8001344:	000b      	movs	r3, r1
 8001346:	0010      	movs	r0, r2
 8001348:	0019      	movs	r1, r3
 800134a:	f7fe ff69 	bl	8000220 <__aeabi_d2uiz>
 800134e:	0003      	movs	r3, r0
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <main+0x170>)
 8001354:	701a      	strb	r2, [r3, #0]
	  TDA7468_Bass_Treble(Cnt1,Cnt);
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <main+0x170>)
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <main+0x168>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	0019      	movs	r1, r3
 8001360:	0010      	movs	r0, r2
 8001362:	f002 fcf7 	bl	8003d54 <TDA7468_Bass_Treble>
 	  if (HAL_GPIO_ReadPin(BLE_PWR_GPIO_Port, BLE_PWR_Pin))
 8001366:	e785      	b.n	8001274 <main+0x5c>
 8001368:	20000028 	.word	0x20000028
 800136c:	20000074 	.word	0x20000074
 8001370:	200000c0 	.word	0x200000c0
 8001374:	48000400 	.word	0x48000400
 8001378:	48001400 	.word	0x48001400
 800137c:	3f8f8000 	.word	0x3f8f8000
 8001380:	2000007a 	.word	0x2000007a
 8001384:	3f6e0000 	.word	0x3f6e0000
 8001388:	2000007b 	.word	0x2000007b

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b095      	sub	sp, #84	; 0x54
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	2420      	movs	r4, #32
 8001394:	193b      	adds	r3, r7, r4
 8001396:	0018      	movs	r0, r3
 8001398:	2330      	movs	r3, #48	; 0x30
 800139a:	001a      	movs	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f002 fd72 	bl	8003e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a2:	2310      	movs	r3, #16
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	0018      	movs	r0, r3
 80013a8:	2310      	movs	r3, #16
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f002 fd6a 	bl	8003e86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b2:	003b      	movs	r3, r7
 80013b4:	0018      	movs	r0, r3
 80013b6:	2310      	movs	r3, #16
 80013b8:	001a      	movs	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	f002 fd63 	bl	8003e86 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	0021      	movs	r1, r4
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2202      	movs	r2, #2
 80013c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2201      	movs	r2, #1
 80013cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2210      	movs	r2, #16
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	0018      	movs	r0, r3
 80013de:	f001 feb9 	bl	8003154 <HAL_RCC_OscConfig>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013e6:	f000 f975 	bl	80016d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ea:	2110      	movs	r1, #16
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2207      	movs	r2, #7
 80013f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2100      	movs	r1, #0
 8001408:	0018      	movs	r0, r3
 800140a:	f002 f9bd 	bl	8003788 <HAL_RCC_ClockConfig>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001412:	f000 f95f 	bl	80016d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001416:	003b      	movs	r3, r7
 8001418:	2220      	movs	r2, #32
 800141a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800141c:	003b      	movs	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001422:	003b      	movs	r3, r7
 8001424:	0018      	movs	r0, r3
 8001426:	f002 fae1 	bl	80039ec <HAL_RCCEx_PeriphCLKConfig>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800142e:	f000 f951 	bl	80016d4 <Error_Handler>
  }
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b015      	add	sp, #84	; 0x54
 8001438:	bd90      	pop	{r4, r7, pc}
	...

0800143c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	0018      	movs	r0, r3
 8001446:	230c      	movs	r3, #12
 8001448:	001a      	movs	r2, r3
 800144a:	2100      	movs	r1, #0
 800144c:	f002 fd1b 	bl	8003e86 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <MX_ADC_Init+0xe4>)
 8001452:	4a34      	ldr	r2, [pc, #208]	; (8001524 <MX_ADC_Init+0xe8>)
 8001454:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <MX_ADC_Init+0xe4>)
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	05d2      	lsls	r2, r2, #23
 800145c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <MX_ADC_Init+0xe4>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_ADC_Init+0xe4>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <MX_ADC_Init+0xe4>)
 800146c:	2201      	movs	r2, #1
 800146e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <MX_ADC_Init+0xe4>)
 8001472:	2204      	movs	r2, #4
 8001474:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <MX_ADC_Init+0xe4>)
 8001478:	2200      	movs	r2, #0
 800147a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <MX_ADC_Init+0xe4>)
 800147e:	2200      	movs	r2, #0
 8001480:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MX_ADC_Init+0xe4>)
 8001484:	2201      	movs	r2, #1
 8001486:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <MX_ADC_Init+0xe4>)
 800148a:	2200      	movs	r2, #0
 800148c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_ADC_Init+0xe4>)
 8001490:	22c2      	movs	r2, #194	; 0xc2
 8001492:	32ff      	adds	r2, #255	; 0xff
 8001494:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_ADC_Init+0xe4>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_ADC_Init+0xe4>)
 800149e:	2224      	movs	r2, #36	; 0x24
 80014a0:	2101      	movs	r1, #1
 80014a2:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_ADC_Init+0xe4>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_ADC_Init+0xe4>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 fab3 	bl	8001a18 <HAL_ADC_Init>
 80014b2:	1e03      	subs	r3, r0, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80014b6:	f000 f90d 	bl	80016d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	0152      	lsls	r2, r2, #5
 80014c6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2206      	movs	r2, #6
 80014cc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ce:	1d3a      	adds	r2, r7, #4
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_ADC_Init+0xe4>)
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f000 fc79 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80014de:	f000 f8f9 	bl	80016d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e8:	1d3a      	adds	r2, r7, #4
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MX_ADC_Init+0xe4>)
 80014ec:	0011      	movs	r1, r2
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 fc6c 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80014f8:	f000 f8ec 	bl	80016d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2202      	movs	r2, #2
 8001500:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001502:	1d3a      	adds	r2, r7, #4
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_ADC_Init+0xe4>)
 8001506:	0011      	movs	r1, r2
 8001508:	0018      	movs	r0, r3
 800150a:	f000 fc5f 	bl	8001dcc <HAL_ADC_ConfigChannel>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001512:	f000 f8df 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	200000c0 	.word	0x200000c0
 8001524:	40012400 	.word	0x40012400

08001528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_I2C1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <MX_I2C1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_I2C1_Init+0x74>)
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <MX_I2C1_Init+0x7c>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_I2C1_Init+0x74>)
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_I2C1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_I2C1_Init+0x74>)
 8001564:	0018      	movs	r0, r3
 8001566:	f001 fa47 	bl	80029f8 <HAL_I2C_Init>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800156e:	f000 f8b1 	bl	80016d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MX_I2C1_Init+0x74>)
 8001574:	2100      	movs	r1, #0
 8001576:	0018      	movs	r0, r3
 8001578:	f001 fd54 	bl	8003024 <HAL_I2CEx_ConfigAnalogFilter>
 800157c:	1e03      	subs	r3, r0, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001580:	f000 f8a8 	bl	80016d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <MX_I2C1_Init+0x74>)
 8001586:	2100      	movs	r1, #0
 8001588:	0018      	movs	r0, r3
 800158a:	f001 fd97 	bl	80030bc <HAL_I2CEx_ConfigDigitalFilter>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001592:	f000 f89f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000028 	.word	0x20000028
 80015a0:	40005400 	.word	0x40005400
 80015a4:	2000090e 	.word	0x2000090e

080015a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_DMA_Init+0x38>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_DMA_Init+0x38>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	430a      	orrs	r2, r1
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_DMA_Init+0x38>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2201      	movs	r2, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2009      	movs	r0, #9
 80015cc:	f000 fea0 	bl	8002310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015d0:	2009      	movs	r0, #9
 80015d2:	f000 feb2 	bl	800233a <HAL_NVIC_EnableIRQ>

}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40021000 	.word	0x40021000

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	240c      	movs	r4, #12
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	0018      	movs	r0, r3
 80015f0:	2314      	movs	r3, #20
 80015f2:	001a      	movs	r2, r3
 80015f4:	2100      	movs	r1, #0
 80015f6:	f002 fc46 	bl	8003e86 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <MX_GPIO_Init+0xe4>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <MX_GPIO_Init+0xe4>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	03c9      	lsls	r1, r1, #15
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <MX_GPIO_Init+0xe4>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	03db      	lsls	r3, r3, #15
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_GPIO_Init+0xe4>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_GPIO_Init+0xe4>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0289      	lsls	r1, r1, #10
 8001620:	430a      	orrs	r2, r1
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_GPIO_Init+0xe4>)
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	4013      	ands	r3, r2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_GPIO_Init+0xe4>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <MX_GPIO_Init+0xe4>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	02c9      	lsls	r1, r1, #11
 800163c:	430a      	orrs	r2, r1
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_GPIO_Init+0xe4>)
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	02db      	lsls	r3, r3, #11
 8001648:	4013      	ands	r3, r2
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 800164e:	2390      	movs	r3, #144	; 0x90
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	2200      	movs	r2, #0
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0018      	movs	r0, r3
 8001658:	f001 f9b1 	bl	80029be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_LED_Pin */
  GPIO_InitStruct.Pin = BLE_LED_Pin;
 800165c:	193b      	adds	r3, r7, r4
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	193b      	adds	r3, r7, r4
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLE_LED_GPIO_Port, &GPIO_InitStruct);
 800166e:	193b      	adds	r3, r7, r4
 8001670:	4a16      	ldr	r2, [pc, #88]	; (80016cc <MX_GPIO_Init+0xe8>)
 8001672:	0019      	movs	r1, r3
 8001674:	0010      	movs	r0, r2
 8001676:	f001 f815 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_LED_Pin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 800167a:	193b      	adds	r3, r7, r4
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	193b      	adds	r3, r7, r4
 8001682:	2201      	movs	r2, #1
 8001684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	193b      	adds	r3, r7, r4
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	193b      	adds	r3, r7, r4
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 8001692:	193a      	adds	r2, r7, r4
 8001694:	2390      	movs	r3, #144	; 0x90
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	0011      	movs	r1, r2
 800169a:	0018      	movs	r0, r3
 800169c:	f001 f802 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_PWR_Pin */
  GPIO_InitStruct.Pin = BLE_PWR_Pin;
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLE_PWR_GPIO_Port, &GPIO_InitStruct);
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <MX_GPIO_Init+0xec>)
 80016b6:	0019      	movs	r1, r3
 80016b8:	0010      	movs	r0, r2
 80016ba:	f000 fff3 	bl	80026a4 <HAL_GPIO_Init>

}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b009      	add	sp, #36	; 0x24
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48001400 	.word	0x48001400
 80016d0:	48000400 	.word	0x48000400

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x44>)
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_MspInit+0x44>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	619a      	str	r2, [r3, #24]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x44>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_MspInit+0x44>)
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_MspInit+0x44>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0549      	lsls	r1, r1, #21
 8001708:	430a      	orrs	r2, r1
 800170a:	61da      	str	r2, [r3, #28]
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_MspInit+0x44>)
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	055b      	lsls	r3, r3, #21
 8001714:	4013      	ands	r3, r2
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b08b      	sub	sp, #44	; 0x2c
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	2414      	movs	r4, #20
 8001732:	193b      	adds	r3, r7, r4
 8001734:	0018      	movs	r0, r3
 8001736:	2314      	movs	r3, #20
 8001738:	001a      	movs	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	f002 fba3 	bl	8003e86 <memset>
  if(hadc->Instance==ADC1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a2d      	ldr	r2, [pc, #180]	; (80017fc <HAL_ADC_MspInit+0xd4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d153      	bne.n	80017f2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_ADC_MspInit+0xd8>)
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_ADC_MspInit+0xd8>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0089      	lsls	r1, r1, #2
 8001754:	430a      	orrs	r2, r1
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_ADC_MspInit+0xd8>)
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_ADC_MspInit+0xd8>)
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_ADC_MspInit+0xd8>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0289      	lsls	r1, r1, #10
 8001770:	430a      	orrs	r2, r1
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_ADC_MspInit+0xd8>)
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2203      	movs	r2, #3
 800178c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	193a      	adds	r2, r7, r4
 8001796:	2390      	movs	r3, #144	; 0x90
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	0011      	movs	r1, r2
 800179c:	0018      	movs	r0, r3
 800179e:	f000 ff81 	bl	80026a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_ADC_MspInit+0xe0>)
 80017a6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	0052      	lsls	r2, r2, #1
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	00d2      	lsls	r2, r2, #3
 80017c8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017cc:	2220      	movs	r2, #32
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fdcb 	bl	8002374 <HAL_DMA_Init>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80017e2:	f7ff ff77 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_ADC_MspInit+0xdc>)
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b00b      	add	sp, #44	; 0x2c
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40012400 	.word	0x40012400
 8001800:	40021000 	.word	0x40021000
 8001804:	2000007c 	.word	0x2000007c
 8001808:	40020008 	.word	0x40020008

0800180c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	2414      	movs	r4, #20
 8001816:	193b      	adds	r3, r7, r4
 8001818:	0018      	movs	r0, r3
 800181a:	2314      	movs	r3, #20
 800181c:	001a      	movs	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	f002 fb31 	bl	8003e86 <memset>
  if(hi2c->Instance==I2C1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_I2C_MspInit+0x94>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d133      	bne.n	8001896 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_I2C_MspInit+0x98>)
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_I2C_MspInit+0x98>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0289      	lsls	r1, r1, #10
 8001838:	430a      	orrs	r2, r1
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_I2C_MspInit+0x98>)
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	029b      	lsls	r3, r3, #10
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800184a:	193b      	adds	r3, r7, r4
 800184c:	22c0      	movs	r2, #192	; 0xc0
 800184e:	00d2      	lsls	r2, r2, #3
 8001850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001852:	0021      	movs	r1, r4
 8001854:	187b      	adds	r3, r7, r1
 8001856:	2212      	movs	r2, #18
 8001858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2201      	movs	r2, #1
 800185e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2203      	movs	r2, #3
 8001864:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2204      	movs	r2, #4
 800186a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	187a      	adds	r2, r7, r1
 800186e:	2390      	movs	r3, #144	; 0x90
 8001870:	05db      	lsls	r3, r3, #23
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f000 ff15 	bl	80026a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_I2C_MspInit+0x98>)
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_I2C_MspInit+0x98>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0389      	lsls	r1, r1, #14
 8001884:	430a      	orrs	r2, r1
 8001886:	61da      	str	r2, [r3, #28]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_I2C_MspInit+0x98>)
 800188a:	69da      	ldr	r2, [r3, #28]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	039b      	lsls	r3, r3, #14
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b00b      	add	sp, #44	; 0x2c
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40021000 	.word	0x40021000

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <NMI_Handler+0x4>

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 f888 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <DMA1_Channel1_IRQHandler+0x14>)
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 fdf6 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	2000007c 	.word	0x2000007c

080018f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopForever+0x6>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopForever+0xe>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopForever+0x16>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001926:	f7ff ffe3 	bl	80018f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800192a:	f002 fa7f 	bl	8003e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192e:	f7ff fc73 	bl	8001218 <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   r0, =_estack
 8001934:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001940:	08003f48 	.word	0x08003f48
  ldr r2, =_sbss
 8001944:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001948:	20000168 	.word	0x20000168

0800194c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_IRQHandler>
	...

08001950 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_Init+0x24>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_Init+0x24>)
 800195a:	2110      	movs	r1, #16
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001960:	2000      	movs	r0, #0
 8001962:	f000 f809 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001966:	f7ff febb 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_InitTick+0x5c>)
 8001982:	681c      	ldr	r4, [r3, #0]
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_InitTick+0x60>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	0019      	movs	r1, r3
 800198a:	23fa      	movs	r3, #250	; 0xfa
 800198c:	0098      	lsls	r0, r3, #2
 800198e:	f7fe fbbb 	bl	8000108 <__udivsi3>
 8001992:	0003      	movs	r3, r0
 8001994:	0019      	movs	r1, r3
 8001996:	0020      	movs	r0, r4
 8001998:	f7fe fbb6 	bl	8000108 <__udivsi3>
 800199c:	0003      	movs	r3, r0
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 fcdb 	bl	800235a <HAL_SYSTICK_Config>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e00f      	b.n	80019cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d80b      	bhi.n	80019ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	2301      	movs	r3, #1
 80019b6:	425b      	negs	r3, r3
 80019b8:	2200      	movs	r2, #0
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 fca8 	bl	8002310 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_InitTick+0x64>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b003      	add	sp, #12
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_IncTick+0x1c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	001a      	movs	r2, r3
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_IncTick+0x20>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	18d2      	adds	r2, r2, r3
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_IncTick+0x20>)
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000100 	.word	0x20000100

08001a04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_GetTick+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	20000100 	.word	0x20000100

08001a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	230f      	movs	r3, #15
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e125      	b.n	8001c82 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2234      	movs	r2, #52	; 0x34
 8001a48:	2100      	movs	r1, #0
 8001a4a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff fe6a 	bl	8001728 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	2210      	movs	r2, #16
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d000      	beq.n	8001a60 <HAL_ADC_Init+0x48>
 8001a5e:	e103      	b.n	8001c68 <HAL_ADC_Init+0x250>
 8001a60:	230f      	movs	r3, #15
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d000      	beq.n	8001a6c <HAL_ADC_Init+0x54>
 8001a6a:	e0fd      	b.n	8001c68 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2204      	movs	r2, #4
 8001a74:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a76:	d000      	beq.n	8001a7a <HAL_ADC_Init+0x62>
 8001a78:	e0f6      	b.n	8001c68 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	4a83      	ldr	r2, [pc, #524]	; (8001c8c <HAL_ADC_Init+0x274>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	2202      	movs	r2, #2
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2203      	movs	r2, #3
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d112      	bne.n	8001abe <HAL_ADC_Init+0xa6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d009      	beq.n	8001aba <HAL_ADC_Init+0xa2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0xa6>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_ADC_Init+0xa8>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d116      	bne.n	8001af2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2218      	movs	r2, #24
 8001acc:	4393      	bics	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	0899      	lsrs	r1, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4964      	ldr	r1, [pc, #400]	; (8001c90 <HAL_ADC_Init+0x278>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7e1b      	ldrb	r3, [r3, #24]
 8001b06:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e5b      	ldrb	r3, [r3, #25]
 8001b0c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e9b      	ldrb	r3, [r3, #26]
 8001b14:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b16:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d002      	beq.n	8001b26 <HAL_ADC_Init+0x10e>
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	015b      	lsls	r3, r3, #5
 8001b24:	e000      	b.n	8001b28 <HAL_ADC_Init+0x110>
 8001b26:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b28:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b2e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_Init+0x124>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e000      	b.n	8001b3e <HAL_ADC_Init+0x126>
 8001b3c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001b3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2124      	movs	r1, #36	; 0x24
 8001b44:	5c5b      	ldrb	r3, [r3, r1]
 8001b46:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b48:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7edb      	ldrb	r3, [r3, #27]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d115      	bne.n	8001b84 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e9b      	ldrb	r3, [r3, #26]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	0252      	lsls	r2, r2, #9
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	e00b      	b.n	8001b84 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	2220      	movs	r2, #32
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	23c2      	movs	r3, #194	; 0xc2
 8001b8a:	33ff      	adds	r3, #255	; 0xff
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d007      	beq.n	8001ba0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68d9      	ldr	r1, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	055b      	lsls	r3, r3, #21
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d01b      	beq.n	8001bf4 <HAL_ADC_Init+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d017      	beq.n	8001bf4 <HAL_ADC_Init+0x1dc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d013      	beq.n	8001bf4 <HAL_ADC_Init+0x1dc>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d00f      	beq.n	8001bf4 <HAL_ADC_Init+0x1dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d00b      	beq.n	8001bf4 <HAL_ADC_Init+0x1dc>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d007      	beq.n	8001bf4 <HAL_ADC_Init+0x1dc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d003      	beq.n	8001bf4 <HAL_ADC_Init+0x1dc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	d112      	bne.n	8001c1a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2107      	movs	r1, #7
 8001c00:	438a      	bics	r2, r1
 8001c02:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6959      	ldr	r1, [r3, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	2207      	movs	r2, #7
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_ADC_Init+0x27c>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d10b      	bne.n	8001c42 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	2203      	movs	r2, #3
 8001c36:	4393      	bics	r3, r2
 8001c38:	2201      	movs	r2, #1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c40:	e01c      	b.n	8001c7c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	2212      	movs	r2, #18
 8001c48:	4393      	bics	r3, r2
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	2201      	movs	r2, #1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001c5e:	230f      	movs	r3, #15
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c66:	e009      	b.n	8001c7c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001c74:	230f      	movs	r3, #15
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	fffffefd 	.word	0xfffffefd
 8001c90:	fffe0219 	.word	0xfffe0219
 8001c94:	833fffe7 	.word	0x833fffe7

08001c98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	2317      	movs	r3, #23
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d15e      	bne.n	8001d76 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2234      	movs	r2, #52	; 0x34
 8001cbc:	5c9b      	ldrb	r3, [r3, r2]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Start_DMA+0x2e>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e05e      	b.n	8001d84 <HAL_ADC_Start_DMA+0xec>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2234      	movs	r2, #52	; 0x34
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	7e5b      	ldrb	r3, [r3, #25]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d007      	beq.n	8001ce6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001cd6:	2317      	movs	r3, #23
 8001cd8:	18fc      	adds	r4, r7, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 f96b 	bl	8001fb8 <ADC_Enable>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ce6:	2317      	movs	r3, #23
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d146      	bne.n	8001d7e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_ADC_Start_DMA+0xf4>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	0052      	lsls	r2, r2, #1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2234      	movs	r2, #52	; 0x34
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_ADC_Start_DMA+0xf8>)
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_ADC_Start_DMA+0xfc>)
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <HAL_ADC_Start_DMA+0x100>)
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	221c      	movs	r2, #28
 8001d2e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3340      	adds	r3, #64	; 0x40
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f000 fb50 	bl	8002404 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2104      	movs	r1, #4
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d76:	2317      	movs	r3, #23
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d7e:	2317      	movs	r3, #23
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b007      	add	sp, #28
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	fffff0fe 	.word	0xfffff0fe
 8001d90:	080020b1 	.word	0x080020b1
 8001d94:	08002165 	.word	0x08002165
 8001d98:	08002183 	.word	0x08002183

08001d9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	055b      	lsls	r3, r3, #21
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d011      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x46>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d00d      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x46>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d009      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x46>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d005      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x46>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d001      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x46>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2234      	movs	r2, #52	; 0x34
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x54>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e0bb      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x1cc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2234      	movs	r2, #52	; 0x34
 8001e24:	2101      	movs	r1, #1
 8001e26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	4013      	ands	r3, r2
 8001e32:	d000      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x6a>
 8001e34:	e09f      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <HAL_ADC_ConfigChannel+0x1d4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d100      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x76>
 8001e40:	e077      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	055b      	lsls	r3, r3, #21
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d037      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d033      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d02f      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d02b      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d027      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d023      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d01f      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2b07      	cmp	r3, #7
 8001e9a:	d01b      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	2107      	movs	r1, #7
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d012      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2107      	movs	r1, #7
 8001eba:	438a      	bics	r2, r1
 8001ebc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6959      	ldr	r1, [r3, #20]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d003      	beq.n	8001ee4 <HAL_ADC_ConfigChannel+0x118>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d152      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d102      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x12a>
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	e001      	b.n	8001efa <HAL_ADC_ConfigChannel+0x12e>
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	03db      	lsls	r3, r3, #15
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d140      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_ADC_ConfigChannel+0x1dc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4927      	ldr	r1, [pc, #156]	; (8001fac <HAL_ADC_ConfigChannel+0x1e0>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7fe f8fa 	bl	8000108 <__udivsi3>
 8001f14:	0003      	movs	r3, r0
 8001f16:	001a      	movs	r2, r3
 8001f18:	0013      	movs	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	189b      	adds	r3, r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f22:	e002      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f9      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x158>
 8001f30:	e02b      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4099      	lsls	r1, r3
 8001f40:	000b      	movs	r3, r1
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	400a      	ands	r2, r1
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d003      	beq.n	8001f5c <HAL_ADC_ConfigChannel+0x190>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b11      	cmp	r3, #17
 8001f5a:	d116      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1a0>
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f6a:	e000      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x1a2>
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e009      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001f82:	230f      	movs	r3, #15
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2234      	movs	r2, #52	; 0x34
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f92:	230f      	movs	r3, #15
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	00001001 	.word	0x00001001
 8001fa4:	40012708 	.word	0x40012708
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	000f4240 	.word	0x000f4240
 8001fb0:	ff7fffff 	.word	0xff7fffff
 8001fb4:	ffbfffff 	.word	0xffbfffff

08001fb8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d112      	bne.n	8001ffc <ADC_Enable+0x44>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d009      	beq.n	8001ff8 <ADC_Enable+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	401a      	ands	r2, r3
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d101      	bne.n	8001ffc <ADC_Enable+0x44>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <ADC_Enable+0x46>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d14b      	bne.n	800209a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <ADC_Enable+0xec>)
 800200a:	4013      	ands	r3, r2
 800200c:	d00d      	beq.n	800202a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	2210      	movs	r2, #16
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2201      	movs	r2, #1
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e038      	b.n	800209c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <ADC_Enable+0xf0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	491b      	ldr	r1, [pc, #108]	; (80020ac <ADC_Enable+0xf4>)
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe f861 	bl	8000108 <__udivsi3>
 8002046:	0003      	movs	r3, r0
 8002048:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800204a:	e002      	b.n	8002052 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3b01      	subs	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f9      	bne.n	800204c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002058:	f7ff fcd4 	bl	8001a04 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002060:	e014      	b.n	800208c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002062:	f7ff fccf 	bl	8001a04 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d90d      	bls.n	800208c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	2210      	movs	r2, #16
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2201      	movs	r2, #1
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	4013      	ands	r3, r2
 8002096:	2b01      	cmp	r3, #1
 8002098:	d1e3      	bne.n	8002062 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b004      	add	sp, #16
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	80000017 	.word	0x80000017
 80020a8:	20000000 	.word	0x20000000
 80020ac:	000f4240 	.word	0x000f4240

080020b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	2250      	movs	r2, #80	; 0x50
 80020c4:	4013      	ands	r3, r2
 80020c6:	d140      	bne.n	800214a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	23c0      	movs	r3, #192	; 0xc0
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	d12d      	bne.n	8002140 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d129      	bne.n	8002140 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2208      	movs	r2, #8
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d122      	bne.n	8002140 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	d110      	bne.n	8002128 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	210c      	movs	r1, #12
 8002112:	438a      	bics	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	4a11      	ldr	r2, [pc, #68]	; (8002160 <ADC_DMAConvCplt+0xb0>)
 800211c:	4013      	ands	r3, r2
 800211e:	2201      	movs	r2, #1
 8002120:	431a      	orrs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
 8002126:	e00b      	b.n	8002140 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	2220      	movs	r2, #32
 800212e:	431a      	orrs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002138:	2201      	movs	r2, #1
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff fe2a 	bl	8001d9c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002148:	e005      	b.n	8002156 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	0010      	movs	r0, r2
 8002154:	4798      	blx	r3
}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	fffffefe 	.word	0xfffffefe

08002164 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff fe19 	bl	8001dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bd80      	pop	{r7, pc}

08002182 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	2240      	movs	r2, #64	; 0x40
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	2204      	movs	r2, #4
 80021a2:	431a      	orrs	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7ff fe06 	bl	8001dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	0002      	movs	r2, r0
 80021c0:	1dfb      	adds	r3, r7, #7
 80021c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	1dfb      	adds	r3, r7, #7
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b7f      	cmp	r3, #127	; 0x7f
 80021ca:	d809      	bhi.n	80021e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	001a      	movs	r2, r3
 80021d2:	231f      	movs	r3, #31
 80021d4:	401a      	ands	r2, r3
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_EnableIRQ+0x30>)
 80021d8:	2101      	movs	r1, #1
 80021da:	4091      	lsls	r1, r2
 80021dc:	000a      	movs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]
  }
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	0002      	movs	r2, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002200:	d828      	bhi.n	8002254 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002202:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <__NVIC_SetPriority+0xd4>)
 8002204:	1dfb      	adds	r3, r7, #7
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	33c0      	adds	r3, #192	; 0xc0
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	589b      	ldr	r3, [r3, r2]
 8002212:	1dfa      	adds	r2, r7, #7
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	0011      	movs	r1, r2
 8002218:	2203      	movs	r2, #3
 800221a:	400a      	ands	r2, r1
 800221c:	00d2      	lsls	r2, r2, #3
 800221e:	21ff      	movs	r1, #255	; 0xff
 8002220:	4091      	lsls	r1, r2
 8002222:	000a      	movs	r2, r1
 8002224:	43d2      	mvns	r2, r2
 8002226:	401a      	ands	r2, r3
 8002228:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	401a      	ands	r2, r3
 8002232:	1dfb      	adds	r3, r7, #7
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	2303      	movs	r3, #3
 800223a:	4003      	ands	r3, r0
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002240:	481f      	ldr	r0, [pc, #124]	; (80022c0 <__NVIC_SetPriority+0xd4>)
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b25b      	sxtb	r3, r3
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	430a      	orrs	r2, r1
 800224c:	33c0      	adds	r3, #192	; 0xc0
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002252:	e031      	b.n	80022b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <__NVIC_SetPriority+0xd8>)
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	0019      	movs	r1, r3
 800225c:	230f      	movs	r3, #15
 800225e:	400b      	ands	r3, r1
 8002260:	3b08      	subs	r3, #8
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3306      	adds	r3, #6
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	18d3      	adds	r3, r2, r3
 800226a:	3304      	adds	r3, #4
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1dfa      	adds	r2, r7, #7
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	0011      	movs	r1, r2
 8002274:	2203      	movs	r2, #3
 8002276:	400a      	ands	r2, r1
 8002278:	00d2      	lsls	r2, r2, #3
 800227a:	21ff      	movs	r1, #255	; 0xff
 800227c:	4091      	lsls	r1, r2
 800227e:	000a      	movs	r2, r1
 8002280:	43d2      	mvns	r2, r2
 8002282:	401a      	ands	r2, r3
 8002284:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	22ff      	movs	r2, #255	; 0xff
 800228c:	401a      	ands	r2, r3
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	0018      	movs	r0, r3
 8002294:	2303      	movs	r3, #3
 8002296:	4003      	ands	r3, r0
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800229c:	4809      	ldr	r0, [pc, #36]	; (80022c4 <__NVIC_SetPriority+0xd8>)
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	001c      	movs	r4, r3
 80022a4:	230f      	movs	r3, #15
 80022a6:	4023      	ands	r3, r4
 80022a8:	3b08      	subs	r3, #8
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	430a      	orrs	r2, r1
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	18c3      	adds	r3, r0, r3
 80022b4:	3304      	adds	r3, #4
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b003      	add	sp, #12
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	045b      	lsls	r3, r3, #17
 80022d8:	429a      	cmp	r2, r3
 80022da:	d301      	bcc.n	80022e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022dc:	2301      	movs	r3, #1
 80022de:	e010      	b.n	8002302 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <SysTick_Config+0x44>)
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	3a01      	subs	r2, #1
 80022e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e8:	2301      	movs	r3, #1
 80022ea:	425b      	negs	r3, r3
 80022ec:	2103      	movs	r1, #3
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7ff ff7c 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x44>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x44>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	210f      	movs	r1, #15
 800231c:	187b      	adds	r3, r7, r1
 800231e:	1c02      	adds	r2, r0, #0
 8002320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	187b      	adds	r3, r7, r1
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b25b      	sxtb	r3, r3
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	0002      	movs	r2, r0
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b25b      	sxtb	r3, r3
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff ff33 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff ffaf 	bl	80022c8 <SysTick_Config>
 800236a:	0003      	movs	r3, r0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e036      	b.n	80023f8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2221      	movs	r2, #33	; 0x21
 800238e:	2102      	movs	r1, #2
 8002390:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_DMA_Init+0x8c>)
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 f946 	bl	800266c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2221      	movs	r2, #33	; 0x21
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}  
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	ffffc00f 	.word	0xffffc00f

08002404 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002412:	2317      	movs	r3, #23
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2220      	movs	r2, #32
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_DMA_Start_IT+0x24>
 8002424:	2302      	movs	r3, #2
 8002426:	e04f      	b.n	80024c8 <HAL_DMA_Start_IT+0xc4>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2221      	movs	r2, #33	; 0x21
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d13a      	bne.n	80024b2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2221      	movs	r2, #33	; 0x21
 8002440:	2102      	movs	r1, #2
 8002442:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	438a      	bics	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f8d7 	bl	8002614 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	210e      	movs	r1, #14
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e00f      	b.n	80024a0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	210a      	movs	r1, #10
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2104      	movs	r1, #4
 800249c:	438a      	bics	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e007      	b.n	80024c2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024ba:	2317      	movs	r3, #23
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80024c2:	2317      	movs	r3, #23
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	781b      	ldrb	r3, [r3, #0]
} 
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2204      	movs	r2, #4
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	d024      	beq.n	8002542 <HAL_DMA_IRQHandler+0x72>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2204      	movs	r2, #4
 80024fc:	4013      	ands	r3, r2
 80024fe:	d020      	beq.n	8002542 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2220      	movs	r2, #32
 8002508:	4013      	ands	r3, r2
 800250a:	d107      	bne.n	800251c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2104      	movs	r1, #4
 8002518:	438a      	bics	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	2104      	movs	r1, #4
 8002526:	4091      	lsls	r1, r2
 8002528:	000a      	movs	r2, r1
 800252a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d100      	bne.n	8002536 <HAL_DMA_IRQHandler+0x66>
 8002534:	e06a      	b.n	800260c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	0010      	movs	r0, r2
 800253e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002540:	e064      	b.n	800260c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2202      	movs	r2, #2
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	d02b      	beq.n	80025aa <HAL_DMA_IRQHandler+0xda>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d027      	beq.n	80025aa <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2220      	movs	r2, #32
 8002562:	4013      	ands	r3, r2
 8002564:	d10b      	bne.n	800257e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	210a      	movs	r1, #10
 8002572:	438a      	bics	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	2101      	movs	r1, #1
 800257c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	2102      	movs	r1, #2
 8002588:	4091      	lsls	r1, r2
 800258a:	000a      	movs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	2100      	movs	r1, #0
 8002594:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	d036      	beq.n	800260c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	0010      	movs	r0, r2
 80025a6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025a8:	e030      	b.n	800260c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2208      	movs	r2, #8
 80025b0:	409a      	lsls	r2, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	d028      	beq.n	800260c <HAL_DMA_IRQHandler+0x13c>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2208      	movs	r2, #8
 80025be:	4013      	ands	r3, r2
 80025c0:	d024      	beq.n	800260c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	210e      	movs	r1, #14
 80025ce:	438a      	bics	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2101      	movs	r1, #1
 80025dc:	4091      	lsls	r1, r2
 80025de:	000a      	movs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2221      	movs	r2, #33	; 0x21
 80025ec:	2101      	movs	r1, #1
 80025ee:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	2100      	movs	r1, #0
 80025f6:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	0010      	movs	r0, r2
 8002608:	4798      	blx	r3
    }
   }
}  
 800260a:	e7ff      	b.n	800260c <HAL_DMA_IRQHandler+0x13c>
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bd80      	pop	{r7, pc}

08002614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	2101      	movs	r1, #1
 800262c:	4091      	lsls	r1, r2
 800262e:	000a      	movs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b10      	cmp	r3, #16
 8002640:	d108      	bne.n	8002654 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002652:	e007      	b.n	8002664 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}

0800266c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <DMA_CalcBaseAndBitshift+0x30>)
 800267a:	4694      	mov	ip, r2
 800267c:	4463      	add	r3, ip
 800267e:	2114      	movs	r1, #20
 8002680:	0018      	movs	r0, r3
 8002682:	f7fd fd41 	bl	8000108 <__udivsi3>
 8002686:	0003      	movs	r3, r0
 8002688:	009a      	lsls	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <DMA_CalcBaseAndBitshift+0x34>)
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}
 800269c:	bffdfff8 	.word	0xbffdfff8
 80026a0:	40020000 	.word	0x40020000

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b2:	e14f      	b.n	8002954 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4091      	lsls	r1, r2
 80026be:	000a      	movs	r2, r1
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d100      	bne.n	80026cc <HAL_GPIO_Init+0x28>
 80026ca:	e140      	b.n	800294e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d00b      	beq.n	80026ec <HAL_GPIO_Init+0x48>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d007      	beq.n	80026ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b12      	cmp	r3, #18
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	409a      	lsls	r2, r3
 80026fa:	0013      	movs	r3, r2
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	0013      	movs	r3, r2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	43da      	mvns	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	2201      	movs	r2, #1
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	43da      	mvns	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4013      	ands	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0xea>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b12      	cmp	r3, #18
 800278c:	d123      	bne.n	80027d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	08da      	lsrs	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	58d3      	ldr	r3, [r2, r3]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2207      	movs	r2, #7
 80027a0:	4013      	ands	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	220f      	movs	r2, #15
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	43da      	mvns	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2107      	movs	r1, #7
 80027ba:	400b      	ands	r3, r1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	409a      	lsls	r2, r3
 80027c0:	0013      	movs	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	6939      	ldr	r1, [r7, #16]
 80027d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	43da      	mvns	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	401a      	ands	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	055b      	lsls	r3, r3, #21
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_GPIO_Init+0x174>
 8002816:	e09a      	b.n	800294e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002818:	4b54      	ldr	r3, [pc, #336]	; (800296c <HAL_GPIO_Init+0x2c8>)
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_GPIO_Init+0x2c8>)
 800281e:	2101      	movs	r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	4b51      	ldr	r3, [pc, #324]	; (800296c <HAL_GPIO_Init+0x2c8>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002830:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_GPIO_Init+0x2cc>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	589b      	ldr	r3, [r3, r2]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2203      	movs	r2, #3
 8002842:	4013      	ands	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	409a      	lsls	r2, r3
 800284a:	0013      	movs	r3, r2
 800284c:	43da      	mvns	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	2390      	movs	r3, #144	; 0x90
 8002858:	05db      	lsls	r3, r3, #23
 800285a:	429a      	cmp	r2, r3
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x1e2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a44      	ldr	r2, [pc, #272]	; (8002974 <HAL_GPIO_Init+0x2d0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x1de>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a43      	ldr	r2, [pc, #268]	; (8002978 <HAL_GPIO_Init+0x2d4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x1da>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a42      	ldr	r2, [pc, #264]	; (800297c <HAL_GPIO_Init+0x2d8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x1d6>
 8002876:	2303      	movs	r3, #3
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x1e4>
 800287a:	2305      	movs	r3, #5
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x1e4>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x1e4>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x1e4>
 8002886:	2300      	movs	r3, #0
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	2103      	movs	r1, #3
 800288c:	400a      	ands	r2, r1
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002898:	4935      	ldr	r1, [pc, #212]	; (8002970 <HAL_GPIO_Init+0x2cc>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43da      	mvns	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	025b      	lsls	r3, r3, #9
 80028be:	4013      	ands	r3, r2
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43da      	mvns	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	029b      	lsls	r3, r3, #10
 80028e8:	4013      	ands	r3, r2
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fa:	4b21      	ldr	r3, [pc, #132]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43da      	mvns	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	035b      	lsls	r3, r3, #13
 8002912:	4013      	ands	r3, r2
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	43da      	mvns	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	039b      	lsls	r3, r3, #14
 800293c:	4013      	ands	r3, r2
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_GPIO_Init+0x2dc>)
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	40da      	lsrs	r2, r3
 800295c:	1e13      	subs	r3, r2, #0
 800295e:	d000      	beq.n	8002962 <HAL_GPIO_Init+0x2be>
 8002960:	e6a8      	b.n	80026b4 <HAL_GPIO_Init+0x10>
  } 
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b006      	add	sp, #24
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	40010000 	.word	0x40010000
 8002974:	48000400 	.word	0x48000400
 8002978:	48000800 	.word	0x48000800
 800297c:	48000c00 	.word	0x48000c00
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	000a      	movs	r2, r1
 800298e:	1cbb      	adds	r3, r7, #2
 8002990:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	1cba      	adds	r2, r7, #2
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	4013      	ands	r3, r2
 800299c:	d004      	beq.n	80029a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800299e:	230f      	movs	r3, #15
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e003      	b.n	80029b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a8:	230f      	movs	r3, #15
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80029b0:	230f      	movs	r3, #15
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
  }
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	0008      	movs	r0, r1
 80029c8:	0011      	movs	r1, r2
 80029ca:	1cbb      	adds	r3, r7, #2
 80029cc:	1c02      	adds	r2, r0, #0
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	1c7b      	adds	r3, r7, #1
 80029d2:	1c0a      	adds	r2, r1, #0
 80029d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d6:	1c7b      	adds	r3, r7, #1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029de:	1cbb      	adds	r3, r7, #2
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029e6:	e003      	b.n	80029f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e8:	1cbb      	adds	r3, r7, #2
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e082      	b.n	8002b10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2241      	movs	r2, #65	; 0x41
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2240      	movs	r2, #64	; 0x40
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7fe fef3 	bl	800180c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2241      	movs	r2, #65	; 0x41
 8002a2a:	2124      	movs	r1, #36	; 0x24
 8002a2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	438a      	bics	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_I2C_Init+0x120>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4931      	ldr	r1, [pc, #196]	; (8002b1c <HAL_I2C_Init+0x124>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	0209      	lsls	r1, r1, #8
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	e007      	b.n	8002a86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2184      	movs	r1, #132	; 0x84
 8002a80:	0209      	lsls	r1, r1, #8
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d104      	bne.n	8002a98 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	491f      	ldr	r1, [pc, #124]	; (8002b20 <HAL_I2C_Init+0x128>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	491a      	ldr	r1, [pc, #104]	; (8002b1c <HAL_I2C_Init+0x124>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	0011      	movs	r1, r2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69d9      	ldr	r1, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1a      	ldr	r2, [r3, #32]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2241      	movs	r2, #65	; 0x41
 8002afc:	2120      	movs	r1, #32
 8002afe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2242      	movs	r2, #66	; 0x42
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	f0ffffff 	.word	0xf0ffffff
 8002b1c:	ffff7fff 	.word	0xffff7fff
 8002b20:	02008000 	.word	0x02008000

08002b24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	0008      	movs	r0, r1
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	0019      	movs	r1, r3
 8002b32:	230a      	movs	r3, #10
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	1c02      	adds	r2, r0, #0
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	1c0a      	adds	r2, r1, #0
 8002b40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2241      	movs	r2, #65	; 0x41
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d000      	beq.n	8002b50 <HAL_I2C_Master_Transmit+0x2c>
 8002b4e:	e0e7      	b.n	8002d20 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2240      	movs	r2, #64	; 0x40
 8002b54:	5c9b      	ldrb	r3, [r3, r2]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_I2C_Master_Transmit+0x3a>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e0e1      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1fe>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b66:	f7fe ff4d 	bl	8001a04 <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	0219      	lsls	r1, r3, #8
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2319      	movs	r3, #25
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f000 f8fc 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0cc      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2241      	movs	r2, #65	; 0x41
 8002b8c:	2121      	movs	r1, #33	; 0x21
 8002b8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2242      	movs	r2, #66	; 0x42
 8002b94:	2110      	movs	r1, #16
 8002b96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	18ba      	adds	r2, r7, r2
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2bff      	cmp	r3, #255	; 0xff
 8002bbc:	d911      	bls.n	8002be2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	045c      	lsls	r4, r3, #17
 8002bce:	230a      	movs	r3, #10
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	8819      	ldrh	r1, [r3, #0]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_I2C_Master_Transmit+0x208>)
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	0023      	movs	r3, r4
 8002bdc:	f000 f9ec 	bl	8002fb8 <I2C_TransferConfig>
 8002be0:	e075      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	049c      	lsls	r4, r3, #18
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	8819      	ldrh	r1, [r3, #0]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_I2C_Master_Transmit+0x208>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	0023      	movs	r3, r4
 8002c04:	f000 f9d8 	bl	8002fb8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c08:	e061      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f8f0 	bl	8002df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e081      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03a      	beq.n	8002cce <HAL_I2C_Master_Transmit+0x1aa>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d136      	bne.n	8002cce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	0013      	movs	r3, r2
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	f000 f883 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e053      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2bff      	cmp	r3, #255	; 0xff
 8002c82:	d911      	bls.n	8002ca8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	045c      	lsls	r4, r3, #17
 8002c94:	230a      	movs	r3, #10
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	8819      	ldrh	r1, [r3, #0]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	0023      	movs	r3, r4
 8002ca2:	f000 f989 	bl	8002fb8 <I2C_TransferConfig>
 8002ca6:	e012      	b.n	8002cce <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	049c      	lsls	r4, r3, #18
 8002cbc:	230a      	movs	r3, #10
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	8819      	ldrh	r1, [r3, #0]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	0023      	movs	r3, r4
 8002cca:	f000 f975 	bl	8002fb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d198      	bne.n	8002c0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f8c8 	bl	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e01a      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	490c      	ldr	r1, [pc, #48]	; (8002d30 <HAL_I2C_Master_Transmit+0x20c>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2241      	movs	r2, #65	; 0x41
 8002d08:	2120      	movs	r1, #32
 8002d0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2242      	movs	r2, #66	; 0x42
 8002d10:	2100      	movs	r1, #0
 8002d12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2240      	movs	r2, #64	; 0x40
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b007      	add	sp, #28
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	80002000 	.word	0x80002000
 8002d30:	fe00e800 	.word	0xfe00e800

08002d34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d103      	bne.n	8002d52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d007      	beq.n	8002d70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]
  }
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d88:	e021      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	d01e      	beq.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d90:	f7fe fe38 	bl	8001a04 <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d302      	bcc.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d113      	bne.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	2220      	movs	r2, #32
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2241      	movs	r2, #65	; 0x41
 8002db6:	2120      	movs	r1, #32
 8002db8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2242      	movs	r2, #66	; 0x42
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	425a      	negs	r2, r3
 8002dde:	4153      	adcs	r3, r2
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	001a      	movs	r2, r3
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d0ce      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b004      	add	sp, #16
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e02:	e02b      	b.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f86e 	bl	8002eec <I2C_IsAcknowledgeFailed>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e029      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	d01e      	beq.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7fe fdf1 	bl	8001a04 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d113      	bne.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	2220      	movs	r2, #32
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2241      	movs	r2, #65	; 0x41
 8002e44:	2120      	movs	r1, #32
 8002e46:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2242      	movs	r2, #66	; 0x42
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e007      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d1cc      	bne.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e80:	e028      	b.n	8002ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f82f 	bl	8002eec <I2C_IsAcknowledgeFailed>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e026      	b.n	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fdb5 	bl	8001a04 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d113      	bne.n	8002ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2241      	movs	r2, #65	; 0x41
 8002ebc:	2120      	movs	r1, #32
 8002ebe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2242      	movs	r2, #66	; 0x42
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e007      	b.n	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2220      	movs	r2, #32
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d1cf      	bne.n	8002e82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2210      	movs	r2, #16
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d151      	bne.n	8002faa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f06:	e021      	b.n	8002f4c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	d01e      	beq.n	8002f4c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe fd79 	bl	8001a04 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_IsAcknowledgeFailed+0x38>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d113      	bne.n	8002f4c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	2220      	movs	r2, #32
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2241      	movs	r2, #65	; 0x41
 8002f34:	2120      	movs	r1, #32
 8002f36:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2242      	movs	r2, #66	; 0x42
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e02f      	b.n	8002fac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2220      	movs	r2, #32
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d1d6      	bne.n	8002f08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2210      	movs	r2, #16
 8002f60:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2220      	movs	r2, #32
 8002f68:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff fee1 	bl	8002d34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	490d      	ldr	r1, [pc, #52]	; (8002fb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	2204      	movs	r2, #4
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2241      	movs	r2, #65	; 0x41
 8002f92:	2120      	movs	r1, #32
 8002f94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2242      	movs	r2, #66	; 0x42
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2240      	movs	r2, #64	; 0x40
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	fe00e800 	.word	0xfe00e800

08002fb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	0008      	movs	r0, r1
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	240a      	movs	r4, #10
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	1c02      	adds	r2, r0, #0
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	2009      	movs	r0, #9
 8002fd0:	183b      	adds	r3, r7, r0
 8002fd2:	1c0a      	adds	r2, r1, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	0d51      	lsrs	r1, r2, #21
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	00d2      	lsls	r2, r2, #3
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	490e      	ldr	r1, [pc, #56]	; (8003020 <I2C_TransferConfig+0x68>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	43d2      	mvns	r2, r2
 8002fec:	401a      	ands	r2, r3
 8002fee:	0011      	movs	r1, r2
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	059b      	lsls	r3, r3, #22
 8002ff6:	0d9a      	lsrs	r2, r3, #22
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	0418      	lsls	r0, r3, #16
 8002ffe:	23ff      	movs	r3, #255	; 0xff
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	4003      	ands	r3, r0
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	431a      	orrs	r2, r3
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b005      	add	sp, #20
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	03ff63ff 	.word	0x03ff63ff

08003024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2241      	movs	r2, #65	; 0x41
 8003032:	5c9b      	ldrb	r3, [r3, r2]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d138      	bne.n	80030ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003044:	2302      	movs	r3, #2
 8003046:	e032      	b.n	80030ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2240      	movs	r2, #64	; 0x40
 800304c:	2101      	movs	r1, #1
 800304e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2241      	movs	r2, #65	; 0x41
 8003054:	2124      	movs	r1, #36	; 0x24
 8003056:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2101      	movs	r1, #1
 8003064:	438a      	bics	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4911      	ldr	r1, [pc, #68]	; (80030b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003074:	400a      	ands	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2241      	movs	r2, #65	; 0x41
 800309c:	2120      	movs	r1, #32
 800309e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	ffffefff 	.word	0xffffefff

080030bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2241      	movs	r2, #65	; 0x41
 80030ca:	5c9b      	ldrb	r3, [r3, r2]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d139      	bne.n	8003146 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2240      	movs	r2, #64	; 0x40
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030dc:	2302      	movs	r3, #2
 80030de:	e033      	b.n	8003148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	2101      	movs	r1, #1
 80030e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2241      	movs	r2, #65	; 0x41
 80030ec:	2124      	movs	r1, #36	; 0x24
 80030ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	438a      	bics	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a11      	ldr	r2, [pc, #68]	; (8003150 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2101      	movs	r1, #1
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2241      	movs	r2, #65	; 0x41
 8003136:	2120      	movs	r1, #32
 8003138:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
  }
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}
 8003150:	fffff0ff 	.word	0xfffff0ff

08003154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e301      	b.n	800376a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2201      	movs	r2, #1
 800316c:	4013      	ands	r3, r2
 800316e:	d100      	bne.n	8003172 <HAL_RCC_OscConfig+0x1e>
 8003170:	e08d      	b.n	800328e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003172:	4bc3      	ldr	r3, [pc, #780]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	220c      	movs	r2, #12
 8003178:	4013      	ands	r3, r2
 800317a:	2b04      	cmp	r3, #4
 800317c:	d00e      	beq.n	800319c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800317e:	4bc0      	ldr	r3, [pc, #768]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	220c      	movs	r2, #12
 8003184:	4013      	ands	r3, r2
 8003186:	2b08      	cmp	r3, #8
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x64>
 800318a:	4bbd      	ldr	r3, [pc, #756]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	401a      	ands	r2, r3
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	025b      	lsls	r3, r3, #9
 8003198:	429a      	cmp	r2, r3
 800319a:	d10d      	bne.n	80031b8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	4bb8      	ldr	r3, [pc, #736]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	029b      	lsls	r3, r3, #10
 80031a4:	4013      	ands	r3, r2
 80031a6:	d100      	bne.n	80031aa <HAL_RCC_OscConfig+0x56>
 80031a8:	e070      	b.n	800328c <HAL_RCC_OscConfig+0x138>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d000      	beq.n	80031b4 <HAL_RCC_OscConfig+0x60>
 80031b2:	e06b      	b.n	800328c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e2d8      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x7c>
 80031c0:	4baf      	ldr	r3, [pc, #700]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4bae      	ldr	r3, [pc, #696]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	0249      	lsls	r1, r1, #9
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e02f      	b.n	8003230 <HAL_RCC_OscConfig+0xdc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x9e>
 80031d8:	4ba9      	ldr	r3, [pc, #676]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4ba8      	ldr	r3, [pc, #672]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80031de:	49a9      	ldr	r1, [pc, #676]	; (8003484 <HAL_RCC_OscConfig+0x330>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	4ba6      	ldr	r3, [pc, #664]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4ba5      	ldr	r3, [pc, #660]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80031ea:	49a7      	ldr	r1, [pc, #668]	; (8003488 <HAL_RCC_OscConfig+0x334>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e01e      	b.n	8003230 <HAL_RCC_OscConfig+0xdc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d10e      	bne.n	8003218 <HAL_RCC_OscConfig+0xc4>
 80031fa:	4ba1      	ldr	r3, [pc, #644]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4ba0      	ldr	r3, [pc, #640]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	02c9      	lsls	r1, r1, #11
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	4b9d      	ldr	r3, [pc, #628]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b9c      	ldr	r3, [pc, #624]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	0249      	lsls	r1, r1, #9
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0xdc>
 8003218:	4b99      	ldr	r3, [pc, #612]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b98      	ldr	r3, [pc, #608]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800321e:	4999      	ldr	r1, [pc, #612]	; (8003484 <HAL_RCC_OscConfig+0x330>)
 8003220:	400a      	ands	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4b96      	ldr	r3, [pc, #600]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b95      	ldr	r3, [pc, #596]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800322a:	4997      	ldr	r1, [pc, #604]	; (8003488 <HAL_RCC_OscConfig+0x334>)
 800322c:	400a      	ands	r2, r1
 800322e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d014      	beq.n	8003262 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe fbe4 	bl	8001a04 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003242:	f7fe fbdf 	bl	8001a04 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e28a      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003254:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	4013      	ands	r3, r2
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0xee>
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fbcf 	bl	8001a04 <HAL_GetTick>
 8003266:	0003      	movs	r3, r0
 8003268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fbca 	bl	8001a04 <HAL_GetTick>
 8003270:	0002      	movs	r2, r0
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e275      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	4b80      	ldr	r3, [pc, #512]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	029b      	lsls	r3, r3, #10
 8003286:	4013      	ands	r3, r2
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x118>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2202      	movs	r2, #2
 8003294:	4013      	ands	r3, r2
 8003296:	d100      	bne.n	800329a <HAL_RCC_OscConfig+0x146>
 8003298:	e069      	b.n	800336e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800329a:	4b79      	ldr	r3, [pc, #484]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	220c      	movs	r2, #12
 80032a0:	4013      	ands	r3, r2
 80032a2:	d00b      	beq.n	80032bc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032a4:	4b76      	ldr	r3, [pc, #472]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	220c      	movs	r2, #12
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d11c      	bne.n	80032ea <HAL_RCC_OscConfig+0x196>
 80032b0:	4b73      	ldr	r3, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	025b      	lsls	r3, r3, #9
 80032b8:	4013      	ands	r3, r2
 80032ba:	d116      	bne.n	80032ea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032bc:	4b70      	ldr	r3, [pc, #448]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2202      	movs	r2, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	d005      	beq.n	80032d2 <HAL_RCC_OscConfig+0x17e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e24b      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b6b      	ldr	r3, [pc, #428]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	22f8      	movs	r2, #248	; 0xf8
 80032d8:	4393      	bics	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00da      	lsls	r2, r3, #3
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e8:	e041      	b.n	800336e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d024      	beq.n	800333c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f2:	4b63      	ldr	r3, [pc, #396]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b62      	ldr	r3, [pc, #392]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80032f8:	2101      	movs	r1, #1
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fb81 	bl	8001a04 <HAL_GetTick>
 8003302:	0003      	movs	r3, r0
 8003304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003308:	f7fe fb7c 	bl	8001a04 <HAL_GetTick>
 800330c:	0002      	movs	r2, r0
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e227      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b59      	ldr	r3, [pc, #356]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2202      	movs	r2, #2
 8003320:	4013      	ands	r3, r2
 8003322:	d0f1      	beq.n	8003308 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	22f8      	movs	r2, #248	; 0xf8
 800332a:	4393      	bics	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00da      	lsls	r2, r3, #3
 8003334:	4b52      	ldr	r3, [pc, #328]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e018      	b.n	800336e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333c:	4b50      	ldr	r3, [pc, #320]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003342:	2101      	movs	r1, #1
 8003344:	438a      	bics	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe fb5c 	bl	8001a04 <HAL_GetTick>
 800334c:	0003      	movs	r3, r0
 800334e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003352:	f7fe fb57 	bl	8001a04 <HAL_GetTick>
 8003356:	0002      	movs	r2, r0
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e202      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2202      	movs	r2, #2
 800336a:	4013      	ands	r3, r2
 800336c:	d1f1      	bne.n	8003352 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2208      	movs	r2, #8
 8003374:	4013      	ands	r3, r2
 8003376:	d036      	beq.n	80033e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d019      	beq.n	80033b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003380:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003384:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338c:	f7fe fb3a 	bl	8001a04 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003396:	f7fe fb35 	bl	8001a04 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e1e0      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a8:	4b35      	ldr	r3, [pc, #212]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	d0f1      	beq.n	8003396 <HAL_RCC_OscConfig+0x242>
 80033b2:	e018      	b.n	80033e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80033b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	438a      	bics	r2, r1
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe fb20 	bl	8001a04 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe fb1b 	bl	8001a04 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1c6      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2202      	movs	r2, #2
 80033e2:	4013      	ands	r3, r2
 80033e4:	d1f1      	bne.n	80033ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d100      	bne.n	80033f2 <HAL_RCC_OscConfig+0x29e>
 80033f0:	e0b4      	b.n	800355c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	201f      	movs	r0, #31
 80033f4:	183b      	adds	r3, r7, r0
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	055b      	lsls	r3, r3, #21
 8003402:	4013      	ands	r3, r2
 8003404:	d110      	bne.n	8003428 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0549      	lsls	r1, r1, #21
 8003410:	430a      	orrs	r2, r1
 8003412:	61da      	str	r2, [r3, #28]
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	055b      	lsls	r3, r3, #21
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003422:	183b      	adds	r3, r7, r0
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_RCC_OscConfig+0x338>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4013      	ands	r3, r2
 8003432:	d11a      	bne.n	800346a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_RCC_OscConfig+0x338>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_RCC_OscConfig+0x338>)
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	0049      	lsls	r1, r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fe fadf 	bl	8001a04 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe fada 	bl	8001a04 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e185      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_OscConfig+0x338>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4013      	ands	r3, r2
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10e      	bne.n	8003490 <HAL_RCC_OscConfig+0x33c>
 8003472:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	4b02      	ldr	r3, [pc, #8]	; (8003480 <HAL_RCC_OscConfig+0x32c>)
 8003478:	2101      	movs	r1, #1
 800347a:	430a      	orrs	r2, r1
 800347c:	621a      	str	r2, [r3, #32]
 800347e:	e035      	b.n	80034ec <HAL_RCC_OscConfig+0x398>
 8003480:	40021000 	.word	0x40021000
 8003484:	fffeffff 	.word	0xfffeffff
 8003488:	fffbffff 	.word	0xfffbffff
 800348c:	40007000 	.word	0x40007000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10c      	bne.n	80034b2 <HAL_RCC_OscConfig+0x35e>
 8003498:	4bb6      	ldr	r3, [pc, #728]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	4bb5      	ldr	r3, [pc, #724]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 800349e:	2101      	movs	r1, #1
 80034a0:	438a      	bics	r2, r1
 80034a2:	621a      	str	r2, [r3, #32]
 80034a4:	4bb3      	ldr	r3, [pc, #716]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	4bb2      	ldr	r3, [pc, #712]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034aa:	2104      	movs	r1, #4
 80034ac:	438a      	bics	r2, r1
 80034ae:	621a      	str	r2, [r3, #32]
 80034b0:	e01c      	b.n	80034ec <HAL_RCC_OscConfig+0x398>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x380>
 80034ba:	4bae      	ldr	r3, [pc, #696]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034bc:	6a1a      	ldr	r2, [r3, #32]
 80034be:	4bad      	ldr	r3, [pc, #692]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034c0:	2104      	movs	r1, #4
 80034c2:	430a      	orrs	r2, r1
 80034c4:	621a      	str	r2, [r3, #32]
 80034c6:	4bab      	ldr	r3, [pc, #684]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034c8:	6a1a      	ldr	r2, [r3, #32]
 80034ca:	4baa      	ldr	r3, [pc, #680]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034cc:	2101      	movs	r1, #1
 80034ce:	430a      	orrs	r2, r1
 80034d0:	621a      	str	r2, [r3, #32]
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0x398>
 80034d4:	4ba7      	ldr	r3, [pc, #668]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	4ba6      	ldr	r3, [pc, #664]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034da:	2101      	movs	r1, #1
 80034dc:	438a      	bics	r2, r1
 80034de:	621a      	str	r2, [r3, #32]
 80034e0:	4ba4      	ldr	r3, [pc, #656]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	4ba3      	ldr	r3, [pc, #652]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80034e6:	2104      	movs	r1, #4
 80034e8:	438a      	bics	r2, r1
 80034ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d014      	beq.n	800351e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7fe fa86 	bl	8001a04 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	e009      	b.n	8003512 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fe fa81 	bl	8001a04 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	4a9b      	ldr	r2, [pc, #620]	; (8003778 <HAL_RCC_OscConfig+0x624>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e12b      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	4b98      	ldr	r3, [pc, #608]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	2202      	movs	r2, #2
 8003518:	4013      	ands	r3, r2
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x3aa>
 800351c:	e013      	b.n	8003546 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe fa71 	bl	8001a04 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	e009      	b.n	800353c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003528:	f7fe fa6c 	bl	8001a04 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	4a91      	ldr	r2, [pc, #580]	; (8003778 <HAL_RCC_OscConfig+0x624>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e116      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	4b8d      	ldr	r3, [pc, #564]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	2202      	movs	r2, #2
 8003542:	4013      	ands	r3, r2
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003546:	231f      	movs	r3, #31
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	4b87      	ldr	r3, [pc, #540]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003556:	4989      	ldr	r1, [pc, #548]	; (800377c <HAL_RCC_OscConfig+0x628>)
 8003558:	400a      	ands	r2, r1
 800355a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2210      	movs	r2, #16
 8003562:	4013      	ands	r3, r2
 8003564:	d063      	beq.n	800362e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d12a      	bne.n	80035c4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800356e:	4b81      	ldr	r3, [pc, #516]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003572:	4b80      	ldr	r3, [pc, #512]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003574:	2104      	movs	r1, #4
 8003576:	430a      	orrs	r2, r1
 8003578:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800357a:	4b7e      	ldr	r3, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 800357c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357e:	4b7d      	ldr	r3, [pc, #500]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003580:	2101      	movs	r1, #1
 8003582:	430a      	orrs	r2, r1
 8003584:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fe fa3d 	bl	8001a04 <HAL_GetTick>
 800358a:	0003      	movs	r3, r0
 800358c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003590:	f7fe fa38 	bl	8001a04 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0e3      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80035a2:	4b74      	ldr	r3, [pc, #464]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	2202      	movs	r2, #2
 80035a8:	4013      	ands	r3, r2
 80035aa:	d0f1      	beq.n	8003590 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80035ac:	4b71      	ldr	r3, [pc, #452]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	22f8      	movs	r2, #248	; 0xf8
 80035b2:	4393      	bics	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	00da      	lsls	r2, r3, #3
 80035bc:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035be:	430a      	orrs	r2, r1
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
 80035c2:	e034      	b.n	800362e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	3305      	adds	r3, #5
 80035ca:	d111      	bne.n	80035f0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80035cc:	4b69      	ldr	r3, [pc, #420]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d0:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035d2:	2104      	movs	r1, #4
 80035d4:	438a      	bics	r2, r1
 80035d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	22f8      	movs	r2, #248	; 0xf8
 80035de:	4393      	bics	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	00da      	lsls	r2, r3, #3
 80035e8:	4b62      	ldr	r3, [pc, #392]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34
 80035ee:	e01e      	b.n	800362e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035f0:	4b60      	ldr	r3, [pc, #384]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	4b5f      	ldr	r3, [pc, #380]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035f6:	2104      	movs	r1, #4
 80035f8:	430a      	orrs	r2, r1
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80035fc:	4b5d      	ldr	r3, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80035fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003600:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003608:	f7fe f9fc 	bl	8001a04 <HAL_GetTick>
 800360c:	0003      	movs	r3, r0
 800360e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003612:	f7fe f9f7 	bl	8001a04 <HAL_GetTick>
 8003616:	0002      	movs	r2, r0
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0a2      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003624:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	2202      	movs	r2, #2
 800362a:	4013      	ands	r3, r2
 800362c:	d1f1      	bne.n	8003612 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d100      	bne.n	8003638 <HAL_RCC_OscConfig+0x4e4>
 8003636:	e097      	b.n	8003768 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003638:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	220c      	movs	r2, #12
 800363e:	4013      	ands	r3, r2
 8003640:	2b08      	cmp	r3, #8
 8003642:	d100      	bne.n	8003646 <HAL_RCC_OscConfig+0x4f2>
 8003644:	e06b      	b.n	800371e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d14c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b48      	ldr	r3, [pc, #288]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003654:	494a      	ldr	r1, [pc, #296]	; (8003780 <HAL_RCC_OscConfig+0x62c>)
 8003656:	400a      	ands	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fe f9d3 	bl	8001a04 <HAL_GetTick>
 800365e:	0003      	movs	r3, r0
 8003660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe f9ce 	bl	8001a04 <HAL_GetTick>
 8003668:	0002      	movs	r2, r0
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e079      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003676:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	049b      	lsls	r3, r3, #18
 800367e:	4013      	ands	r3, r2
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003682:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	220f      	movs	r2, #15
 8003688:	4393      	bics	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003692:	430a      	orrs	r2, r1
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <HAL_RCC_OscConfig+0x630>)
 800369c:	4013      	ands	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	431a      	orrs	r2, r3
 80036aa:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	0449      	lsls	r1, r1, #17
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe f9a1 	bl	8001a04 <HAL_GetTick>
 80036c2:	0003      	movs	r3, r0
 80036c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe f99c 	bl	8001a04 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e047      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	049b      	lsls	r3, r3, #18
 80036e2:	4013      	ands	r3, r2
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x574>
 80036e6:	e03f      	b.n	8003768 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 80036ee:	4924      	ldr	r1, [pc, #144]	; (8003780 <HAL_RCC_OscConfig+0x62c>)
 80036f0:	400a      	ands	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe f986 	bl	8001a04 <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fe f981 	bl	8001a04 <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e02c      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	049b      	lsls	r3, r3, #18
 8003718:	4013      	ands	r3, r2
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x5aa>
 800371c:	e024      	b.n	8003768 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e01f      	b.n	800376a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003730:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_RCC_OscConfig+0x620>)
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	025b      	lsls	r3, r3, #9
 800373c:	401a      	ands	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	429a      	cmp	r2, r3
 8003744:	d10e      	bne.n	8003764 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	220f      	movs	r2, #15
 800374a:	401a      	ands	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d107      	bne.n	8003764 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	23f0      	movs	r3, #240	; 0xf0
 8003758:	039b      	lsls	r3, r3, #14
 800375a:	401a      	ands	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b008      	add	sp, #32
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	40021000 	.word	0x40021000
 8003778:	00001388 	.word	0x00001388
 800377c:	efffffff 	.word	0xefffffff
 8003780:	feffffff 	.word	0xfeffffff
 8003784:	ffc2ffff 	.word	0xffc2ffff

08003788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0b3      	b.n	8003904 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b5b      	ldr	r3, [pc, #364]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2201      	movs	r2, #1
 80037a2:	4013      	ands	r3, r2
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d911      	bls.n	80037ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b58      	ldr	r3, [pc, #352]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4393      	bics	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	4b55      	ldr	r3, [pc, #340]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037bc:	4b53      	ldr	r3, [pc, #332]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e09a      	b.n	8003904 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2202      	movs	r2, #2
 80037d4:	4013      	ands	r3, r2
 80037d6:	d015      	beq.n	8003804 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2204      	movs	r2, #4
 80037de:	4013      	ands	r3, r2
 80037e0:	d006      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037e2:	4b4b      	ldr	r3, [pc, #300]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 80037e8:	21e0      	movs	r1, #224	; 0xe0
 80037ea:	00c9      	lsls	r1, r1, #3
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	22f0      	movs	r2, #240	; 0xf0
 80037f6:	4393      	bics	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	4b44      	ldr	r3, [pc, #272]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d040      	beq.n	8003890 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	4013      	ands	r3, r2
 8003820:	d114      	bne.n	800384c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e06e      	b.n	8003904 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b38      	ldr	r3, [pc, #224]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	049b      	lsls	r3, r3, #18
 8003836:	4013      	ands	r3, r2
 8003838:	d108      	bne.n	800384c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e062      	b.n	8003904 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b34      	ldr	r3, [pc, #208]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2202      	movs	r2, #2
 8003844:	4013      	ands	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e05b      	b.n	8003904 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384c:	4b30      	ldr	r3, [pc, #192]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2203      	movs	r2, #3
 8003852:	4393      	bics	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003860:	f7fe f8d0 	bl	8001a04 <HAL_GetTick>
 8003864:	0003      	movs	r3, r0
 8003866:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003868:	e009      	b.n	800387e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386a:	f7fe f8cb 	bl	8001a04 <HAL_GetTick>
 800386e:	0002      	movs	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <HAL_RCC_ClockConfig+0x18c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e042      	b.n	8003904 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	220c      	movs	r2, #12
 8003884:	401a      	ands	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1ec      	bne.n	800386a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d211      	bcs.n	80038c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	4393      	bics	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_RCC_ClockConfig+0x184>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4013      	ands	r3, r2
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e020      	b.n	8003904 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2204      	movs	r2, #4
 80038c8:	4013      	ands	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <HAL_RCC_ClockConfig+0x190>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038e0:	f000 f820 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038e4:	0001      	movs	r1, r0
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_RCC_ClockConfig+0x188>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	220f      	movs	r2, #15
 80038ee:	4013      	ands	r3, r2
 80038f0:	4a0a      	ldr	r2, [pc, #40]	; (800391c <HAL_RCC_ClockConfig+0x194>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	000a      	movs	r2, r1
 80038f6:	40da      	lsrs	r2, r3
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x198>)
 80038fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7fe f83b 	bl	8001978 <HAL_InitTick>
  
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b004      	add	sp, #16
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40022000 	.word	0x40022000
 8003910:	40021000 	.word	0x40021000
 8003914:	00001388 	.word	0x00001388
 8003918:	fffff8ff 	.word	0xfffff8ff
 800391c:	08003f10 	.word	0x08003f10
 8003920:	20000000 	.word	0x20000000

08003924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b08f      	sub	sp, #60	; 0x3c
 8003928:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800392a:	2314      	movs	r3, #20
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003930:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003932:	c313      	stmia	r3!, {r0, r1, r4}
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800393c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800393e:	c313      	stmia	r3!, {r0, r1, r4}
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003948:	2300      	movs	r3, #0
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
 800394c:	2300      	movs	r3, #0
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
 8003950:	2300      	movs	r3, #0
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003958:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	220c      	movs	r2, #12
 8003962:	4013      	ands	r3, r2
 8003964:	2b04      	cmp	r3, #4
 8003966:	d002      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x4a>
 8003968:	2b08      	cmp	r3, #8
 800396a:	d003      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x50>
 800396c:	e02d      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800396e:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003972:	e02d      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	0c9b      	lsrs	r3, r3, #18
 8003978:	220f      	movs	r2, #15
 800397a:	4013      	ands	r3, r2
 800397c:	2214      	movs	r2, #20
 800397e:	18ba      	adds	r2, r7, r2
 8003980:	5cd3      	ldrb	r3, [r2, r3]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003984:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	220f      	movs	r2, #15
 800398a:	4013      	ands	r3, r2
 800398c:	1d3a      	adds	r2, r7, #4
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	025b      	lsls	r3, r3, #9
 8003998:	4013      	ands	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800399c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399e:	4812      	ldr	r0, [pc, #72]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039a0:	f7fc fbb2 	bl	8000108 <__udivsi3>
 80039a4:	0003      	movs	r3, r0
 80039a6:	001a      	movs	r2, r3
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	4353      	muls	r3, r2
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
 80039ae:	e009      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b2:	000a      	movs	r2, r1
 80039b4:	0152      	lsls	r2, r2, #5
 80039b6:	1a52      	subs	r2, r2, r1
 80039b8:	0193      	lsls	r3, r2, #6
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	185b      	adds	r3, r3, r1
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039c8:	e002      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b00f      	add	sp, #60	; 0x3c
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	08003eb0 	.word	0x08003eb0
 80039e0:	08003ec0 	.word	0x08003ec0
 80039e4:	40021000 	.word	0x40021000
 80039e8:	007a1200 	.word	0x007a1200

080039ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	025b      	lsls	r3, r3, #9
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003a08:	e08e      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2017      	movs	r0, #23
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b57      	ldr	r3, [pc, #348]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	055b      	lsls	r3, r3, #21
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d110      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	0549      	lsls	r1, r1, #21
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	61da      	str	r2, [r3, #28]
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	055b      	lsls	r3, r3, #21
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	183b      	adds	r3, r7, r0
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d11a      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4c:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b48      	ldr	r3, [pc, #288]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	0049      	lsls	r1, r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd ffd3 	bl	8001a04 <HAL_GetTick>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	e008      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fd ffce 	bl	8001a04 <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e077      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a82:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	23c0      	movs	r3, #192	; 0xc0
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d034      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	23c0      	movs	r3, #192	; 0xc0
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d02c      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aae:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ab0:	6a1a      	ldr	r2, [r3, #32]
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	0249      	lsls	r1, r1, #9
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003abe:	6a1a      	ldr	r2, [r3, #32]
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ac2:	492e      	ldr	r1, [pc, #184]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ac8:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fd ff95 	bl	8001a04 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	e009      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fd ff90 	bl	8001a04 <HAL_GetTick>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e038      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	2202      	movs	r2, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afe:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b12:	2317      	movs	r3, #23
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b22:	4918      	ldr	r1, [pc, #96]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	2203      	movs	r2, #3
 8003b38:	4393      	bics	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	2210      	movs	r2, #16
 8003b56:	4393      	bics	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b006      	add	sp, #24
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40007000 	.word	0x40007000
 8003b78:	fffffcff 	.word	0xfffffcff
 8003b7c:	fffeffff 	.word	0xfffeffff
 8003b80:	00001388 	.word	0x00001388
 8003b84:	efffffff 	.word	0xefffffff

08003b88 <TDA7468_Init>:
uint8_t Surr[2];
TDAREGS Tda;
const uint8_t Bass[16] = {0,1,2,3,4,5,6,7,15,14,13,12,11,10,9,8};
const uint8_t Treble[16] = {0,16,32,48,64,80,96,112,240,224,208,192,176,160,144,128};

void TDA7468_Init (I2C_HandleTypeDef hi2c){
 8003b88:	b084      	sub	sp, #16
 8003b8a:	b5b0      	push	{r4, r5, r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af02      	add	r7, sp, #8
 8003b90:	2510      	movs	r5, #16
 8003b92:	197c      	adds	r4, r7, r5
 8003b94:	6020      	str	r0, [r4, #0]
 8003b96:	6061      	str	r1, [r4, #4]
 8003b98:	60a2      	str	r2, [r4, #8]
 8003b9a:	60e3      	str	r3, [r4, #12]
	
	i2ch = hi2c;
 8003b9c:	4a4e      	ldr	r2, [pc, #312]	; (8003cd8 <TDA7468_Init+0x150>)
 8003b9e:	197b      	adds	r3, r7, r5
 8003ba0:	0010      	movs	r0, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	234c      	movs	r3, #76	; 0x4c
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	f000 f964 	bl	8003e74 <memcpy>
	Tda.InMic.Input = IN2;
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <TDA7468_Init+0x154>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	701a      	strb	r2, [r3, #0]
	Tda.InMic.Mute = MUTE_OFF;
 8003bb2:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <TDA7468_Init+0x154>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	705a      	strb	r2, [r3, #1]
	Tda.InMic.Mic = MIC_GAIN_0dB;
 8003bb8:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <TDA7468_Init+0x154>)
 8003bba:	2218      	movs	r2, #24
 8003bbc:	709a      	strb	r2, [r3, #2]
	
	Tda.Input_Gain = INPU_GAIN_14db;
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <TDA7468_Init+0x154>)
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	711a      	strb	r2, [r3, #4]
	
	Tda.Surr.SBuffer_Gain = SURR_BUFFER_GAIN_0dB;
 8003bc4:	4b45      	ldr	r3, [pc, #276]	; (8003cdc <TDA7468_Init+0x154>)
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	721a      	strb	r2, [r3, #8]
	Tda.Surr.SGain = SUR_GAIN_0dB;
 8003bca:	4b44      	ldr	r3, [pc, #272]	; (8003cdc <TDA7468_Init+0x154>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	719a      	strb	r2, [r3, #6]
	Tda.Surr.SMix = SURR_MIX_INV0;
 8003bd0:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <TDA7468_Init+0x154>)
 8003bd2:	2218      	movs	r2, #24
 8003bd4:	71da      	strb	r2, [r3, #7]
	Tda.Surr.SMode = SURROUND_OFF;
 8003bd6:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <TDA7468_Init+0x154>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	715a      	strb	r2, [r3, #5]
	
	Tda.Left_Volume = 0;
 8003bdc:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <TDA7468_Init+0x154>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	725a      	strb	r2, [r3, #9]
	Tda.Right_Volume = 0;
 8003be2:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <TDA7468_Init+0x154>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	729a      	strb	r2, [r3, #10]
	
	Tda.Treeble = 0x0F;
 8003be8:	4b3c      	ldr	r3, [pc, #240]	; (8003cdc <TDA7468_Init+0x154>)
 8003bea:	220f      	movs	r2, #15
 8003bec:	72da      	strb	r2, [r3, #11]
	Tda.Bass = 0x0F;
 8003bee:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <TDA7468_Init+0x154>)
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	731a      	strb	r2, [r3, #12]
	
	Tda.Output = OUTPUT_MUTE_OFF;
 8003bf4:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <TDA7468_Init+0x154>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	735a      	strb	r2, [r3, #13]
	
	Tda.Alc.ALC_Mode = 0;
 8003bfa:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <TDA7468_Init+0x154>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	739a      	strb	r2, [r3, #14]
	Surr[0] = SURROUND;
 8003c00:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c02:	2202      	movs	r2, #2
 8003c04:	701a      	strb	r2, [r3, #0]
	Surr[1] 	 = Tda.Surr.SMode|Tda.Surr.SMode|Tda.Surr.SMix|Tda.Surr.SBuffer_Gain;
 8003c06:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <TDA7468_Init+0x154>)
 8003c08:	795a      	ldrb	r2, [r3, #5]
 8003c0a:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <TDA7468_Init+0x154>)
 8003c0c:	79db      	ldrb	r3, [r3, #7]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <TDA7468_Init+0x154>)
 8003c14:	7a1b      	ldrb	r3, [r3, #8]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c1c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Surr,2,100);
 8003c1e:	4a30      	ldr	r2, [pc, #192]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c20:	482d      	ldr	r0, [pc, #180]	; (8003cd8 <TDA7468_Init+0x150>)
 8003c22:	2364      	movs	r3, #100	; 0x64
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2302      	movs	r3, #2
 8003c28:	2188      	movs	r1, #136	; 0x88
 8003c2a:	f7fe ff7b 	bl	8002b24 <HAL_I2C_Master_Transmit>
	Surr[0] = INPUT_SLECT;
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
	Surr[1] 	 = Tda.InMic.Input|Tda.InMic.Mute|Tda.InMic.Mic|Tda.InMic.Mic_On;
 8003c34:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <TDA7468_Init+0x154>)
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <TDA7468_Init+0x154>)
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <TDA7468_Init+0x154>)
 8003c42:	789b      	ldrb	r3, [r3, #2]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <TDA7468_Init+0x154>)
 8003c4a:	78db      	ldrb	r3, [r3, #3]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c52:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Surr,2,100);
 8003c54:	4a22      	ldr	r2, [pc, #136]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c56:	4820      	ldr	r0, [pc, #128]	; (8003cd8 <TDA7468_Init+0x150>)
 8003c58:	2364      	movs	r3, #100	; 0x64
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	2188      	movs	r1, #136	; 0x88
 8003c60:	f7fe ff60 	bl	8002b24 <HAL_I2C_Master_Transmit>
	Surr[0] = VOLUME_LEFT;
 8003c64:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c66:	2203      	movs	r2, #3
 8003c68:	701a      	strb	r2, [r3, #0]
	Surr[1] 	 = 0x0F;
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Surr,2,100);
 8003c70:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c72:	4819      	ldr	r0, [pc, #100]	; (8003cd8 <TDA7468_Init+0x150>)
 8003c74:	2364      	movs	r3, #100	; 0x64
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2302      	movs	r3, #2
 8003c7a:	2188      	movs	r1, #136	; 0x88
 8003c7c:	f7fe ff52 	bl	8002b24 <HAL_I2C_Master_Transmit>
	Surr[0] = VOLUME_RIGHT;
 8003c80:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c82:	2204      	movs	r2, #4
 8003c84:	701a      	strb	r2, [r3, #0]
	Surr[1] 	 = 0x0F;
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c88:	220f      	movs	r2, #15
 8003c8a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Surr,2,100);
 8003c8c:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c8e:	4812      	ldr	r0, [pc, #72]	; (8003cd8 <TDA7468_Init+0x150>)
 8003c90:	2364      	movs	r3, #100	; 0x64
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2302      	movs	r3, #2
 8003c96:	2188      	movs	r1, #136	; 0x88
 8003c98:	f7fe ff44 	bl	8002b24 <HAL_I2C_Master_Transmit>
	Surr[0] = OUTPUT;
 8003c9c:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <TDA7468_Init+0x158>)
 8003c9e:	2206      	movs	r2, #6
 8003ca0:	701a      	strb	r2, [r3, #0]
	Surr[1] 	 = Tda.Output;
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <TDA7468_Init+0x154>)
 8003ca4:	7b5a      	ldrb	r2, [r3, #13]
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <TDA7468_Init+0x158>)
 8003ca8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Surr,2,100);
 8003caa:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <TDA7468_Init+0x158>)
 8003cac:	480a      	ldr	r0, [pc, #40]	; (8003cd8 <TDA7468_Init+0x150>)
 8003cae:	2364      	movs	r3, #100	; 0x64
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	2188      	movs	r1, #136	; 0x88
 8003cb6:	f7fe ff35 	bl	8002b24 <HAL_I2C_Master_Transmit>
	 TDA7468_Bass_Treble (  Tda.Treeble, Tda.Bass);
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <TDA7468_Init+0x154>)
 8003cbc:	7ada      	ldrb	r2, [r3, #11]
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <TDA7468_Init+0x154>)
 8003cc0:	7b1b      	ldrb	r3, [r3, #12]
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	0010      	movs	r0, r2
 8003cc6:	f000 f845 	bl	8003d54 <TDA7468_Bass_Treble>

}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bcb0      	pop	{r4, r5, r7}
 8003cd0:	bc08      	pop	{r3}
 8003cd2:	b004      	add	sp, #16
 8003cd4:	4718      	bx	r3
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	20000104 	.word	0x20000104
 8003cdc:	20000154 	.word	0x20000154
 8003ce0:	20000150 	.word	0x20000150

08003ce4 <TDA7468_Master_Volume>:
TDAREGS TDA7468_Get_Settings (void){

return Tda;
}
	
void TDA7468_Master_Volume (uint8_t Vol){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	0002      	movs	r2, r0
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	701a      	strb	r2, [r3, #0]

	Surr[0] = VOLUME_LEFT;
 8003cf0:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <TDA7468_Master_Volume+0x64>)
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	701a      	strb	r2, [r3, #0]
	Surr[1] 	 = Vol;
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <TDA7468_Master_Volume+0x64>)
 8003cf8:	1dfa      	adds	r2, r7, #7
 8003cfa:	7812      	ldrb	r2, [r2, #0]
 8003cfc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Surr,2,100);
 8003cfe:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <TDA7468_Master_Volume+0x64>)
 8003d00:	4812      	ldr	r0, [pc, #72]	; (8003d4c <TDA7468_Master_Volume+0x68>)
 8003d02:	2364      	movs	r3, #100	; 0x64
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2302      	movs	r3, #2
 8003d08:	2188      	movs	r1, #136	; 0x88
 8003d0a:	f7fe ff0b 	bl	8002b24 <HAL_I2C_Master_Transmit>
	Surr[0] = VOLUME_RIGHT;
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <TDA7468_Master_Volume+0x64>)
 8003d10:	2204      	movs	r2, #4
 8003d12:	701a      	strb	r2, [r3, #0]
	Surr[1] 	 = Vol;
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <TDA7468_Master_Volume+0x64>)
 8003d16:	1dfa      	adds	r2, r7, #7
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Surr,2,100);
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <TDA7468_Master_Volume+0x64>)
 8003d1e:	480b      	ldr	r0, [pc, #44]	; (8003d4c <TDA7468_Master_Volume+0x68>)
 8003d20:	2364      	movs	r3, #100	; 0x64
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2302      	movs	r3, #2
 8003d26:	2188      	movs	r1, #136	; 0x88
 8003d28:	f7fe fefc 	bl	8002b24 <HAL_I2C_Master_Transmit>
	Tda.Left_Volume = Vol;
 8003d2c:	1dfb      	adds	r3, r7, #7
 8003d2e:	2200      	movs	r2, #0
 8003d30:	569a      	ldrsb	r2, [r3, r2]
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <TDA7468_Master_Volume+0x6c>)
 8003d34:	725a      	strb	r2, [r3, #9]
	Tda.Right_Volume = Vol;
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <TDA7468_Master_Volume+0x6c>)
 8003d38:	1dfa      	adds	r2, r7, #7
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	729a      	strb	r2, [r3, #10]

}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	20000150 	.word	0x20000150
 8003d4c:	20000104 	.word	0x20000104
 8003d50:	20000154 	.word	0x20000154

08003d54 <TDA7468_Bass_Treble>:

void TDA7468_Bass_Treble (uint8_t Ba, uint8_t Tre){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	1dbb      	adds	r3, r7, #6
 8003d62:	1c0a      	adds	r2, r1, #0
 8003d64:	701a      	strb	r2, [r3, #0]
	uint8_t Buf [2];
	
	Buf[0]= TREBLE_BASS;
 8003d66:	200c      	movs	r0, #12
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	2205      	movs	r2, #5
 8003d6c:	701a      	strb	r2, [r3, #0]
	Buf[1] = Treble[Tre]|Bass[Ba];
 8003d6e:	1dbb      	adds	r3, r7, #6
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <TDA7468_Bass_Treble+0x5c>)
 8003d74:	5cd2      	ldrb	r2, [r2, r3]
 8003d76:	1dfb      	adds	r3, r7, #7
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	490e      	ldr	r1, [pc, #56]	; (8003db4 <TDA7468_Bass_Treble+0x60>)
 8003d7c:	5ccb      	ldrb	r3, [r1, r3]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	183b      	adds	r3, r7, r0
 8003d84:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Buf,2,100);
 8003d86:	183a      	adds	r2, r7, r0
 8003d88:	480b      	ldr	r0, [pc, #44]	; (8003db8 <TDA7468_Bass_Treble+0x64>)
 8003d8a:	2364      	movs	r3, #100	; 0x64
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2302      	movs	r3, #2
 8003d90:	2188      	movs	r1, #136	; 0x88
 8003d92:	f7fe fec7 	bl	8002b24 <HAL_I2C_Master_Transmit>
	Tda.Bass = Ba;
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <TDA7468_Bass_Treble+0x68>)
 8003d98:	1dfa      	adds	r2, r7, #7
 8003d9a:	7812      	ldrb	r2, [r2, #0]
 8003d9c:	731a      	strb	r2, [r3, #12]
	Tda.Treeble = Tre;
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <TDA7468_Bass_Treble+0x68>)
 8003da0:	1dba      	adds	r2, r7, #6
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	72da      	strb	r2, [r3, #11]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b004      	add	sp, #16
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	08003f30 	.word	0x08003f30
 8003db4:	08003f20 	.word	0x08003f20
 8003db8:	20000104 	.word	0x20000104
 8003dbc:	20000154 	.word	0x20000154

08003dc0 <TDA7468_Set_Input>:
	Buf[0] = INPUT_GAIN;
	Buf[1] = Gain;
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Buf,2,100);
	Tda.Input_Gain = Gain;
}
void TDA7468_Set_Input (uint8_t Input){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	1dfb      	adds	r3, r7, #7
 8003dca:	701a      	strb	r2, [r3, #0]
	uint8_t Buf [2];
	Buf[0]=INPUT_SLECT;
 8003dcc:	230c      	movs	r3, #12
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
	if (Input>3){
 8003dd4:	1dfb      	adds	r3, r7, #7
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d803      	bhi.n	8003de4 <TDA7468_Set_Input+0x24>
	}
	else {
		Tda.InMic.Input = Input;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <TDA7468_Set_Input+0x64>)
 8003dde:	1dfa      	adds	r2, r7, #7
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	701a      	strb	r2, [r3, #0]
	}
	Buf[0] = INPUT_SLECT;
 8003de4:	210c      	movs	r1, #12
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
	Buf[1] 	 = Tda.InMic.Input|Tda.InMic.Mute|Tda.InMic.Mic|Tda.InMic.Mic_On;
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <TDA7468_Set_Input+0x64>)
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <TDA7468_Set_Input+0x64>)
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <TDA7468_Set_Input+0x64>)
 8003dfa:	789b      	ldrb	r3, [r3, #2]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <TDA7468_Set_Input+0x64>)
 8003e02:	78db      	ldrb	r3, [r3, #3]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2ch,TDA7468_I2C_ADRESS,Buf,2,100);
 8003e0c:	187a      	adds	r2, r7, r1
 8003e0e:	4806      	ldr	r0, [pc, #24]	; (8003e28 <TDA7468_Set_Input+0x68>)
 8003e10:	2364      	movs	r3, #100	; 0x64
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2302      	movs	r3, #2
 8003e16:	2188      	movs	r1, #136	; 0x88
 8003e18:	f7fe fe84 	bl	8002b24 <HAL_I2C_Master_Transmit>

}
 8003e1c:	46c0      	nop			; (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b004      	add	sp, #16
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000154 	.word	0x20000154
 8003e28:	20000104 	.word	0x20000104

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	2600      	movs	r6, #0
 8003e30:	4d0c      	ldr	r5, [pc, #48]	; (8003e64 <__libc_init_array+0x38>)
 8003e32:	4c0d      	ldr	r4, [pc, #52]	; (8003e68 <__libc_init_array+0x3c>)
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	f000 f82b 	bl	8003e98 <_init>
 8003e42:	4d0a      	ldr	r5, [pc, #40]	; (8003e6c <__libc_init_array+0x40>)
 8003e44:	4c0a      	ldr	r4, [pc, #40]	; (8003e70 <__libc_init_array+0x44>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	00b3      	lsls	r3, r6, #2
 8003e52:	58eb      	ldr	r3, [r5, r3]
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	00b3      	lsls	r3, r6, #2
 8003e5c:	58eb      	ldr	r3, [r5, r3]
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	08003f40 	.word	0x08003f40
 8003e68:	08003f40 	.word	0x08003f40
 8003e6c:	08003f40 	.word	0x08003f40
 8003e70:	08003f44 	.word	0x08003f44

08003e74 <memcpy>:
 8003e74:	2300      	movs	r3, #0
 8003e76:	b510      	push	{r4, lr}
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d100      	bne.n	8003e7e <memcpy+0xa>
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	5ccc      	ldrb	r4, [r1, r3]
 8003e80:	54c4      	strb	r4, [r0, r3]
 8003e82:	3301      	adds	r3, #1
 8003e84:	e7f8      	b.n	8003e78 <memcpy+0x4>

08003e86 <memset>:
 8003e86:	0003      	movs	r3, r0
 8003e88:	1882      	adds	r2, r0, r2
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d100      	bne.n	8003e90 <memset+0xa>
 8003e8e:	4770      	bx	lr
 8003e90:	7019      	strb	r1, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	e7f9      	b.n	8003e8a <memset+0x4>
	...

08003e98 <_init>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_fini>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr
